# app.py ‚Äî üí° heavily commented so you can learn every step
from datetime import date, timedelta, datetime
from pathlib import Path
from functools import wraps
import json
import pandas as pd  # –î–æ–±–∞–≤–ª—è–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É pandas –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Excel
import threading
import secrets
import os
import shutil
import hashlib
import re
import uuid

from flask import Flask, jsonify, render_template, request, session, redirect, url_for, flash, send_file
from flask_login import LoginManager, UserMixin, login_user, logout_user, login_required, current_user
from flask_wtf.csrf import CSRFProtect
from flask_limiter import Limiter
from flask_limiter.util import get_remote_address
from werkzeug.security import generate_password_hash, check_password_hash
from werkzeug.utils import secure_filename

BASE_DIR = Path(__file__).parent
DATA_FILE = BASE_DIR / "logs" / "tasks.json"  # JSON‚Äë—Ñ–∞–π–ª –∑ —É—Å—ñ–º–∞ –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫–∞–º–∏
GOODS_FILE = BASE_DIR / "goods.xlsx"  # Excel-—Ñ–∞–π–ª –∑—ñ —Å–ø–∏—Å–∫–æ–º —Ç–æ–≤–∞—Ä—ñ–≤
USERS_FILE = BASE_DIR / "users.json"  # JSON-—Ñ–∞–π–ª –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏
BACKUP_DIR = BASE_DIR / "backups"  # –ü–∞–ø–∫–∞ –¥–ª—è –±–µ–∫–∞–ø—ñ–≤
SECURITY_LOG_FILE = BASE_DIR / "logs" / "security.log"  # –õ–æ–≥ –±–µ–∑–ø–µ–∫–∏

# –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –ø–∞–ø–∫–∏
BACKUP_DIR.mkdir(exist_ok=True)
(BASE_DIR / "logs").mkdir(exist_ok=True)

# ---------------------------------------------------------------------------
# üëâ  Flask app: –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –±–µ–∫–µ–Ω–¥‚ÄëAPI ‚Äî —Ñ—Ä–æ–Ω—Ç –∑–±–µ—Ä—ñ–≥–∞—î/—á–∏—Ç–∞—î JSON —á–µ—Ä–µ–∑ fetch
# ---------------------------------------------------------------------------
app = Flask(__name__, template_folder="templates", static_folder="static")
app.config.update(JSON_SORT_KEYS=False)  # –Ω–µ –º—ñ–Ω—è—î–º–æ –ø–æ—Ä—è–¥–æ–∫ –∫–ª—é—á—ñ–≤

# –ë–µ–∑–ø–µ—á–Ω–∏–π —Å–µ–∫—Ä–µ—Ç–Ω–∏–π –∫–ª—é—á –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
SECRET_KEY_FILE = BASE_DIR / ".secret_key"
if os.environ.get('SECRET_KEY'):
    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å–µ–∫—Ä–µ—Ç–Ω–∏–π –∫–ª—é—á –∑—ñ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ (Heroku, Docker)
    app.secret_key = os.environ.get('SECRET_KEY')
elif SECRET_KEY_FILE.exists():
    app.secret_key = SECRET_KEY_FILE.read_text().strip()
else:
    app.secret_key = secrets.token_hex(32)
    SECRET_KEY_FILE.write_text(app.secret_key)

# üîí –ö–†–ò–¢–ò–ß–ù–Ü –ö–û–ú–ü–û–ù–ï–ù–¢–ò –ë–ï–ó–ü–ï–ö–ò –î–õ–Ø –ü–†–û–î–ê–ö–®–ù
# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è CSRF Protection
csrf = CSRFProtect(app)

# –ò—Å–∫–ª—é—á–∞–µ–º API endpoints –∏–∑ CSRF –ø—Ä–æ–≤–µ—Ä–∫–∏
@csrf.exempt
def csrf_exempt_api():
    """–ò—Å–∫–ª—é—á–∞–µ–º –≤—Å–µ API endpoints –∏–∑ CSRF –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ AJAX –∑–∞–ø—Ä–æ—Å–æ–≤"""
    pass

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –¥–æ–¥–∞—Ç–∫–æ–≤–æ—ó –±–µ–∑–ø–µ–∫–∏ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω
app.config.update(
    # Session security –¥–ª—è HTTPS (–∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ –∑ HTTPS!)
    # SESSION_COOKIE_SECURE=True,  # –†–æ–∑–∫–æ–º–µ–Ω—Ç—É–≤–∞—Ç–∏ –¥–ª—è HTTPS
    SESSION_COOKIE_HTTPONLY=True,
    SESSION_COOKIE_SAMESITE='Strict',
    PERMANENT_SESSION_LIFETIME=timedelta(hours=8),  # –°–µ—Å—ñ—è –Ω–∞ 8 –≥–æ–¥–∏–Ω
    
    # CSRF –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
    WTF_CSRF_TIME_LIMIT=3600,  # CSRF —Ç–æ–∫–µ–Ω –¥—ñ–π—Å–Ω–∏–π 1 –≥–æ–¥–∏–Ω—É
    WTF_CSRF_SSL_STRICT=False,  # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è, –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ True –¥–ª—è HTTPS
)

# Rate limiting - –∑–∞—Ö–∏—Å—Ç –≤—ñ–¥ brute force –∞—Ç–∞–∫
limiter = Limiter(
    app=app,
    key_func=get_remote_address,
    default_limits=["200 per day", "50 per hour"]
)

# Security headers –¥–ª—è –∑–∞—Ö–∏—Å—Ç—É –≤—ñ–¥ XSS, clickjacking —Ç–∞ —ñ–Ω.
@app.after_request
def add_security_headers(response):
    """–î–æ–¥–∞—î –≤–∞–∂–ª–∏–≤—ñ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –±–µ–∑–ø–µ–∫–∏."""
    response.headers['X-Content-Type-Options'] = 'nosniff'
    response.headers['X-Frame-Options'] = 'DENY'
    response.headers['X-XSS-Protection'] = '1; mode=block'
    response.headers['Referrer-Policy'] = 'strict-origin-when-cross-origin'
    
    # Content Security Policy - –∑–∞—Ö–∏—Å—Ç –≤—ñ–¥ XSS
    csp = (
        "default-src 'self'; "
        "script-src 'self' 'unsafe-inline' https://cdn.tailwindcss.com https://cdn.jsdelivr.net; "
        "style-src 'self' 'unsafe-inline' https://cdn.tailwindcss.com; "
        "img-src 'self' data:; "
        "connect-src 'self'; "
        "font-src 'self' https://fonts.gstatic.com; "
        "object-src 'none'; "
        "base-uri 'self';"
    )
    response.headers['Content-Security-Policy'] = csp
    
    # Strict Transport Security (—Ç—ñ–ª—å–∫–∏ –¥–ª—è HTTPS)
    # response.headers['Strict-Transport-Security'] = 'max-age=31536000; includeSubDomains'
    
    return response

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Flask-Login
login_manager = LoginManager()
login_manager.init_app(app)
login_manager.login_view = 'login'
login_manager.login_message = '–ë—É–¥—å –ª–∞—Å–∫–∞, —É–≤—ñ–π–¥—ñ—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏.'
login_manager.login_message_category = 'info'

# Lock –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –¥–æ—Å—Ç—É–ø—É –¥–æ —Ñ–∞–π–ª—É –ª–æ–≥—ñ–≤
log_file_lock = threading.Lock()

# –ö–ª–∞—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
class User(UserMixin):
    def __init__(self, username, role):
        self.id = username
        self.username = username
        self.role = role
    
    def is_super_admin(self):
        return self.role == 'super_admin'
    
    def is_user(self):
        return self.role in ['super_admin', 'user']
    
    def is_viewer(self):
        return self.role in ['super_admin', 'user', 'viewer']

@login_manager.user_loader
def load_user(username):
    users = load_users()
    if username in users:
        return User(username, users[username]['role'])
    return None

def log_security_event(event_type, username, details="", ip_address=""):
    """–õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–¥—ñ–π –±–µ–∑–ø–µ–∫–∏."""
    try:
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        log_entry = f"[{timestamp}] {event_type} | User: {username} | IP: {ip_address} | Details: {details}\n"
        
        with open(SECURITY_LOG_FILE, "a", encoding="utf-8") as f:
            f.write(log_entry)
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Å—É –≤ –ª–æ–≥ –±–µ–∑–ø–µ–∫–∏: {e}")

def create_backup():
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–µ–∫–∞–ø—É –≤—Å—ñ—Ö –≤–∞–∂–ª–∏–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤."""
    try:
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        backup_folder = BACKUP_DIR / f"backup_{timestamp}"
        backup_folder.mkdir(exist_ok=True)
        
        # –ë–µ–∫–∞–ø —Ñ–∞–π–ª—ñ–≤
        files_to_backup = [
            ("users.json", USERS_FILE),
            ("tasks.json", DATA_FILE),
            ("changes_log.json", BASE_DIR / "logs" / "changes_log.json"),
            ("goods.xlsx", GOODS_FILE)
        ]
        
        for backup_name, source_file in files_to_backup:
            if source_file.exists():
                shutil.copy2(source_file, backup_folder / backup_name)
        
        # –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä—ñ –±–µ–∫–∞–ø–∏ (–∑–∞–ª–∏—à–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ 10)
        cleanup_old_backups()
        
        print(f"–ë–µ–∫–∞–ø —Å—Ç–≤–æ—Ä–µ–Ω–æ: {backup_folder}")
        return True
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–µ–∫–∞–ø—É: {e}")
        return False

def cleanup_old_backups():
    """–í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä—ñ –±–µ–∫–∞–ø–∏, –∑–∞–ª–∏—à–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ 10."""
    try:
        backup_folders = sorted([d for d in BACKUP_DIR.iterdir() if d.is_dir() and d.name.startswith("backup_")])
        
        if len(backup_folders) > 10:
            for old_backup in backup_folders[:-10]:
                shutil.rmtree(old_backup)
                print(f"–í–∏–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä–∏–π –±–µ–∫–∞–ø: {old_backup}")
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö –±–µ–∫–∞–ø—ñ–≤: {e}")

def load_users():
    """–ß–∏—Ç–∞—î–º–æ users.json –∞–±–æ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º."""
    if USERS_FILE.exists():
        with USERS_FILE.open("r", encoding="utf-8") as f:
            return json.load(f)
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –∑ –∑–∞—Ö–µ—à–æ–≤–∞–Ω–∏–º–∏ –ø–∞—Ä–æ–ª—è–º–∏
    default_users = {
        "admin": {
            "password": generate_password_hash("admin123"), 
            "role": "super_admin",
            "created_at": datetime.now().isoformat(),
            "last_login": None
        },
        "user": {
            "password": generate_password_hash("user123"), 
            "role": "user",
            "created_at": datetime.now().isoformat(),
            "last_login": None
        },
        "viewer": {
            "password": generate_password_hash("view123"), 
            "role": "viewer",
            "created_at": datetime.now().isoformat(),
            "last_login": None
        }
    }
    save_users(default_users)
    return default_users

def save_users(users_data):
    """–ó–∞–ø–∏—Å—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —É users.json –∑ –±–µ–∫–∞–ø–æ–º."""
    # –°—Ç–≤–æ—Ä—é—î–º–æ –±–µ–∫–∞–ø –ø–µ—Ä–µ–¥ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è–º
    create_backup()
    
    with USERS_FILE.open("w", encoding="utf-8") as f:
        json.dump(users_data, f, ensure_ascii=False, indent=2)

def role_required(required_role):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ä–æ–ª—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
    def decorator(f):
        @wraps(f)
        def decorated_function(*args, **kwargs):
            if not current_user.is_authenticated:
                return redirect(url_for('login'))
            
            if required_role == 'super_admin' and not current_user.is_super_admin():
                flash('–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏.', 'error')
                return redirect(url_for('index'))
            elif required_role == 'user' and not current_user.is_user():
                flash('–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏.', 'error')
                return redirect(url_for('index'))
            elif required_role == 'viewer' and not current_user.is_viewer():
                flash('–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏.', 'error')
                return redirect(url_for('index'))
            
            return f(*args, **kwargs)
        return decorated_function
    return decorator


def load_tasks():
    """–ß–∏—Ç–∞—î–º–æ tasks.json –∞–±–æ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø—É—Å—Ç–∏–π —Å–ª–æ–≤–Ω–∏–∫, —è–∫—â–æ —Ñ–∞–π–ª –≤—ñ–¥—Å—É—Ç–Ω—ñ–π."""
    if DATA_FILE.exists():
        with DATA_FILE.open("r", encoding="utf-8") as f:
            return json.load(f)
    return {}


def load_goods():
    """–ß–∏—Ç–∞—î–º–æ goods.xlsx —ñ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ç–æ–≤–∞—Ä–∏, –∑–≥—Ä—É–ø–æ–≤–∞–Ω—ñ –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏."""
    try:
        if GOODS_FILE.exists():
            print(f"–§–∞–π–ª goods.xlsx –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {GOODS_FILE}")
            # –ß–∏—Ç–∞—î–º–æ Excel-—Ñ–∞–π–ª –ø–æ–≤–Ω—ñ—Å—Ç—é, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –ø–æ–º–∏–ª–æ–∫ –∑ —ñ–Ω–¥–µ–∫—Å–∞–º–∏
            df = pd.read_excel(GOODS_FILE, header=0)
            
            # –û—Ç—Ä–∏–º–∞—î–º–æ –Ω–∞–∑–≤–∏ –∫–æ–ª–æ–Ω–æ–∫
            print(f"–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–ª–æ–Ω–∫–∏ –≤ —Ñ–∞–π–ª—ñ: {list(df.columns)}")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —è–∫—ñ –∫–æ–ª–æ–Ω–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ
            required_columns = ['–ö–∞—Ç–µ–≥–æ—Ä—ñ—è', '–ù–∞–∑–≤–∞ —Ç–æ–≤–∞—Ä—É', '–í–∞–≥–∞ (–∫–≥)', '–ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –ø–∞–ª–ª–µ—Ç–∏']
            available_columns = [col for col in required_columns if col in df.columns]
            
            if len(available_columns) < 2:  # –ú—ñ–Ω—ñ–º—É–º –ø–æ—Ç—Ä—ñ–±–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è —Ç–∞ –Ω–∞–∑–≤–∞
                print(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è —á–∏—Ç–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤. –î–æ—Å—Ç—É–ø–Ω—ñ: {available_columns}")
                return {}
            
            category_column = available_columns[0]  # –ö–∞—Ç–µ–≥–æ—Ä—ñ—è
            product_column = available_columns[1]   # –ù–∞–∑–≤–∞ —Ç–æ–≤–∞—Ä—É
            weight_column = available_columns[2] if len(available_columns) > 2 else None
            pallet_coef_column = available_columns[3] if len(available_columns) > 3 else None
            
            print(f"–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–æ–ª–æ–Ω–∫–∏: {category_column}, {product_column}, {weight_column}, {pallet_coef_column}")
            print(f"–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä—è–¥–∫—ñ–≤: {len(df)}")
            
            # –í–∏–¥–∞–ª—è—î–º–æ —Ä—è–¥–∫–∏ –∑ –≤—ñ–¥—Å—É—Ç–Ω—ñ–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏
            df = df.dropna(subset=[product_column])
            print(f"–ü—ñ—Å–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ä—è–¥–∫—ñ–≤ –∑ –ø—É—Å—Ç–∏–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏: {len(df)}")
            
            # –Ø–∫—â–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è –≤—ñ–¥—Å—É—Ç–Ω—è, –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ "–Ü–Ω—à–µ" —è–∫ –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
            df[category_column] = df[category_column].fillna("–Ü–Ω—à–µ")
            
            # –ì—Ä—É–ø—É—î–º–æ —Ç–æ–≤–∞—Ä–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö
            categorized_goods = {}
            for _, row in df.iterrows():
                category = str(row[category_column]).strip()
                product = str(row[product_column]).strip()
                
                # –ë–µ–∑–ø–µ—á–Ω–æ –æ—Ç—Ä–∏–º—É—î–º–æ –≤–∞–≥—É —Ç–∞ –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç
                weight = float(row[weight_column]) if weight_column and pd.notna(row[weight_column]) else 1.0
                pallet_coef = float(row[pallet_coef_column]) if pallet_coef_column and pd.notna(row[pallet_coef_column]) else 1.0
                
                if category not in categorized_goods:
                    categorized_goods[category] = []
                    
                categorized_goods[category].append({
                    "name": product,
                    "weight": weight,
                    "pallet_coef": pallet_coef
                })
            
            print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π: {len(categorized_goods)}")
            for cat, items in categorized_goods.items():
                print(f"  - {cat}: {len(items)} —Ç–æ–≤–∞—Ä—ñ–≤")
            
            return categorized_goods
        else:
            print(f"–§–∞–π–ª goods.xlsx –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {GOODS_FILE}")
            # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø—É—Å—Ç—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            return {}
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —á–∏—Ç–∞–Ω–Ω—ñ —Ñ–∞–π–ª—É goods.xlsx: {e}")
        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø—É—Å—Ç—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
        return {}


def load_warehouses():
    """–ß–∏—Ç–∞—î–º–æ goods.xlsx —ñ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥—ñ–≤ –∑ –∫–æ–ª–æ–Ω–∫–∏ '–°–∫–ª–∞–¥–∏'."""
    try:
        if GOODS_FILE.exists():
            # –ß–∏—Ç–∞—î–º–æ Excel-—Ñ–∞–π–ª –ø–æ–≤–Ω—ñ—Å—Ç—é
            df = pd.read_excel(GOODS_FILE)
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –∫–æ–ª–æ–Ω–∫–∞ '–°–∫–ª–∞–¥–∏'
            if '–°–∫–ª–∞–¥–∏' in df.columns:
                # –í–∏–¥–∞–ª—è—î–º–æ —Ä—è–¥–∫–∏ –∑ –≤—ñ–¥—Å—É—Ç–Ω—ñ–º–∏ –Ω–∞–∑–≤–∞–º–∏ —Å–∫–ª–∞–¥—ñ–≤ —Ç–∞ –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –Ω–∞ —Å–ø–∏—Å–æ–∫
                warehouses = df['–°–∫–ª–∞–¥–∏'].dropna().tolist()
                # –í–∏–¥–∞–ª—è—î–º–æ –ø—É—Å—Ç—ñ —Ä—è–¥–∫–∏
                warehouses = [w for w in warehouses if str(w).strip() != '']
                print(f"–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(warehouses)} —Å–∫–ª–∞–¥—ñ–≤ –∑ Excel: {warehouses}")
                return warehouses
            else:
                print("–ö–æ–ª–æ–Ω–∫–∞ '–°–∫–ª–∞–¥–∏' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –≤ Excel —Ñ–∞–π–ª—ñ")
                return []
        else:
            # –Ø–∫—â–æ —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø—É—Å—Ç–∏–π —Å–ø–∏—Å–æ–∫
            print("–§–∞–π–ª Excel –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø—É—Å—Ç–∏–π —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥—ñ–≤")
            return []
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —á–∏—Ç–∞–Ω–Ω—ñ —Å–∫–ª–∞–¥—ñ–≤ –∑ —Ñ–∞–π–ª—É goods.xlsx: {e}")
        # –Ø–∫—â–æ —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø—É—Å—Ç–∏–π —Å–ø–∏—Å–æ–∫
        return []


def save_tasks(data: dict):
    """–ó–∞–ø–∏—Å—É—î–º–æ —Å–ª–æ–≤–Ω–∏–∫ —É tasks.json, pretty‚Äëprint –¥–ª—è –∑—Ä—É—á–Ω–æ—Å—Ç—ñ –∑ –±–µ–∫–∞–ø–æ–º."""
    # –°—Ç–≤–æ—Ä—é—î–º–æ –±–µ–∫–∞–ø –ø–µ—Ä–µ–¥ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è–º –≤–∞–∂–ª–∏–≤–∏—Ö –∑–º—ñ–Ω
    if len(data) % 10 == 0:  # –°—Ç–≤–æ—Ä—é—î–º–æ –±–µ–∫–∞–ø –∫–æ–∂–Ω—ñ 10 –æ–ø–µ—Ä–∞—Ü—ñ–π
        create_backup()
    
    with DATA_FILE.open("w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)


@app.route("/")
@login_required
def index():
    # ‚ö†Ô∏è –ù–∞ —Ñ—Ä–æ–Ω—Ç ¬´–∂–∏–≤—ñ¬ª –¥–∞–Ω—ñ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω—ñ ‚Äî –≤—ñ–Ω —Ä–æ–±–∏—Ç—å –æ–∫—Ä–µ–º–∏–π GET /api/tasks.
    #      –¢—É—Ç –ø—Ä–æ—Å—Ç–æ –≤—ñ–¥–¥–∞—î–º–æ HTML‚Äë—à–∞–±–ª–æ–Ω.
    return render_template("index.html", user=current_user)

@app.route("/login", methods=["GET", "POST"])
@limiter.limit("10 per minute")  # –ú–∞–∫—Å–∏–º—É–º 10 —Å–ø—Ä–æ–± –≤—Ö–æ–¥—É –∑–∞ —Ö–≤–∏–ª–∏–Ω—É
def login():
    if request.method == "POST":
        username = request.form.get("username", "").strip()
        password = request.form.get("password", "")
        ip_address = request.environ.get('HTTP_X_FORWARDED_FOR', request.remote_addr)
        
        # –í–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö
        if not username or not password:
            log_security_event("LOGIN_FAILED", username or "unknown", "Empty credentials", ip_address)
            flash('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —ñ–º\'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ –ø–∞—Ä–æ–ª—å', 'error')
            return render_template("login.html")
        
        users = load_users()
        
        if username in users:
            stored_password = users[username]["password"]
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –ø–∞—Ä–æ–ª—å –≤–∂–µ –∑–∞—Ö–µ—à–æ–≤–∞–Ω–∏–π (–ø—ñ–¥—Ç—Ä–∏–º—É—î–º–æ —Ä—ñ–∑–Ω—ñ –∞–ª–≥–æ—Ä–∏—Ç–º–∏)
            if (stored_password.startswith('pbkdf2:sha256:') or 
                stored_password.startswith('scrypt:') or 
                stored_password.startswith('argon2:')):
                # –ó–∞—Ö–µ—à–æ–≤–∞–Ω–∏–π –ø–∞—Ä–æ–ª—å - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ check_password_hash
                password_valid = check_password_hash(stored_password, password)
            else:
                # –°—Ç–∞—Ä–∏–π –Ω–µ–∑–∞—Ö–µ—à–æ–≤–∞–Ω–∏–π –ø–∞—Ä–æ–ª—å - –∫–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ
                password_valid = (stored_password == password)
                if password_valid:
                    # –û–Ω–æ–≤–ª—é—î–º–æ –ø–∞—Ä–æ–ª—å –¥–æ –∑–∞—Ö–µ—à–æ–≤–∞–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É
                    users[username]["password"] = generate_password_hash(password)
                    users[username]["last_login"] = datetime.now().isoformat()
                    save_users(users)
            
            if password_valid:
                # –û–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –≤—Ö–æ–¥—É
                users[username]["last_login"] = datetime.now().isoformat()
                save_users(users)
                
                user = User(username, users[username]["role"])
                login_user(user)
                
                log_security_event("LOGIN_SUCCESS", username, f"Role: {users[username]['role']}", ip_address)
                flash(f'–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ, {username}!', 'success')
                return redirect(url_for('index'))
            else:
                log_security_event("LOGIN_FAILED", username, "Invalid password", ip_address)
                flash('–ù–µ–≤—ñ—Ä–Ω–µ —ñ–º\'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ –ø–∞—Ä–æ–ª—å', 'error')
        else:
            log_security_event("LOGIN_FAILED", username, "User not found", ip_address)
            flash('–ù–µ–≤—ñ—Ä–Ω–µ —ñ–º\'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ –ø–∞—Ä–æ–ª—å', 'error')
    
    return render_template("login.html")

@app.route("/logout")
@login_required
def logout():
    username = current_user.username
    ip_address = request.environ.get('HTTP_X_FORWARDED_FOR', request.remote_addr)
    
    log_security_event("LOGOUT", username, "", ip_address)
    logout_user()
    flash('–í–∏ —É—Å–ø—ñ—à–Ω–æ –≤–∏–π—à–ª–∏ –∑ —Å–∏—Å—Ç–µ–º–∏', 'info')
    return redirect(url_for('login'))

@app.route("/admin")
@login_required
@role_required('super_admin')
def admin_panel():
    users = load_users()
    stats = get_user_stats()
    return render_template("admin.html", users=users, stats=stats)

@app.route("/admin/add_user", methods=["POST"])
@login_required
@role_required('super_admin')
@limiter.limit("5 per minute")  # –ú–∞–∫—Å–∏–º—É–º 5 –¥–æ–¥–∞–≤–∞–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑–∞ —Ö–≤–∏–ª–∏–Ω—É
def add_user():
    username = request.form.get("username", "").strip()
    password = request.form.get("password", "")
    role = request.form.get("role", "")
    ip_address = request.environ.get('HTTP_X_FORWARDED_FOR', request.remote_addr)
    
    # –í–∞–ª—ñ–¥–∞—Ü—ñ—è —ñ–º–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    valid_username, username_error = validate_username(username)
    if not valid_username:
        log_security_event("USER_ADD_FAILED", current_user.username, f"Invalid username: {username}", ip_address)
        flash(username_error, 'error')
        return redirect(url_for('admin_panel'))
    
    # –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ø–∞—Ä–æ–ª—è
    valid_password, password_error = validate_password(password)
    if not valid_password:
        log_security_event("USER_ADD_FAILED", current_user.username, f"Invalid password for user: {username}", ip_address)
        flash(password_error, 'error')
        return redirect(url_for('admin_panel'))
    
    # –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ä–æ–ª—ñ
    if role not in ['super_admin', 'user', 'viewer']:
        log_security_event("USER_ADD_FAILED", current_user.username, f"Invalid role: {role}", ip_address)
        flash('–ù–µ–≤—ñ—Ä–Ω–∞ —Ä–æ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞', 'error')
        return redirect(url_for('admin_panel'))
    
    users = load_users()
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ—Å—Ç—å —ñ–º–µ–Ω—ñ
    if username in users:
        log_security_event("USER_ADD_FAILED", current_user.username, f"User already exists: {username}", ip_address)
        flash('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ —Ç–∞–∫–∏–º —ñ–º–µ–Ω–µ–º –≤–∂–µ —ñ—Å–Ω—É—î', 'error')
        return redirect(url_for('admin_panel'))
    
    # –î–æ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –∑–∞—Ö–µ—à–æ–≤–∞–Ω–∏–º –ø–∞—Ä–æ–ª–µ–º
    users[username] = {
        "password": generate_password_hash(password), 
        "role": role,
        "created_at": datetime.now().isoformat(),
        "created_by": current_user.username,
        "last_login": None
    }
    save_users(users)
    
    # –õ–æ–≥ –¥—ñ—ó
    log_security_event("USER_ADDED", current_user.username, f"Added user: {username} with role: {role}", ip_address)
    
    flash(f'–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {username} —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω –∑ —Ä–æ–ª–ª—é {role}', 'success')
    return redirect(url_for('admin_panel'))

@app.route("/admin/delete_user/<username>", methods=["POST"])
@login_required
@role_required('super_admin')
def delete_user(username):
    ip_address = request.environ.get('HTTP_X_FORWARDED_FOR', request.remote_addr)
    
    if username == current_user.username:
        log_security_event("USER_DELETE_FAILED", current_user.username, "Attempted to delete self", ip_address)
        flash('–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Å–µ–±–µ', 'error')
        return redirect(url_for('admin_panel'))
    
    users = load_users()
    if username in users:
        user_role = users[username]["role"]
        del users[username]
        save_users(users)
        
        # –õ–æ–≥ –¥—ñ—ó
        log_security_event("USER_DELETED", current_user.username, f"Deleted user: {username} with role: {user_role}", ip_address)
        
        flash(f'–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {username} ({user_role}) —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω', 'success')
    else:
        log_security_event("USER_DELETE_FAILED", current_user.username, f"User not found: {username}", ip_address)
        flash('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω', 'error')
    
    return redirect(url_for('admin_panel'))


@app.route("/api/tasks", methods=["GET", "POST", "PUT", "DELETE"])
@login_required
@csrf.exempt  # –ò—Å–∫–ª—é—á–∞–µ–º API –∏–∑ CSRF –ø—Ä–æ–≤–µ—Ä–∫–∏
def tasks():
    db = load_tasks()
    
    if request.method == "GET":  # üîπ –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫–∏
        # –ó–¥–µ—Å—å —Ñ–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–¥–∞—á–∏, —É–¥–∞–ª—è—è —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–∞—Ä—à–µ 90 –¥–Ω–µ–π
        today = date.today()
        cutoff_date = today - timedelta(days=90)
        tasks_to_delete = []
        
        for task_id, task_data in db.items():
            try:
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞—á–∏ –∏–∑ —Å—Ç—Ä–æ–∫–∏ ISO
                task_date_str = task_data.get("start", "")
                if task_date_str:
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ISO —Å—Ç—Ä–æ–∫—É –≤ –æ–±—ä–µ–∫—Ç date (–±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É, –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏)
                    task_date = date.fromisoformat(task_date_str.split("T")[0])
                    # –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ —Å—Ç–∞—Ä—à–µ 90 –¥–Ω–µ–π, –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
                    if task_date < cutoff_date:
                        tasks_to_delete.append(task_id)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∞—Ç—ã –∑–∞–¥–∞—á–∏ {task_id}: {e}")
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞—á–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        if tasks_to_delete:
            for task_id in tasks_to_delete:
                db.pop(task_id, None)
                print(f"–ó–∞–¥–∞—á–∞ {task_id} —É–¥–∞–ª–µ–Ω–∞, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ —Å—Ç–∞—Ä—à–µ 90 –¥–Ω–µ–π")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            save_tasks(db)
            print(f"–£–¥–∞–ª–µ–Ω–æ {len(tasks_to_delete)} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–¥–∞—á")
            
        return jsonify(db)

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—Ä–∞–≤–∞ –¥–ª—è –º–æ–¥–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –¥–∞–Ω–∏—Ö
    if current_user.role == 'viewer':
        return jsonify(error="–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ü—ñ—î—ó –æ–ø–µ—Ä–∞—Ü—ñ—ó"), 403

    payload = request.get_json(force=True)
    rect_id = payload.get("id")

    if request.method == "POST":  # üî∏ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫
        db[rect_id] = payload  # frontend –ø—Ä–∏—Å–≤–æ—é—î id —á–µ—Ä–µ–∑ Date.now()
        save_tasks(db)
        return jsonify(status="created")

    if request.method == "PUT":  # üü† –æ–Ω–æ–≤–∏—Ç–∏ —ñ—Å–Ω—É—é—á–∏–π –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫
        if rect_id not in db:
            return jsonify(error="not found"), 404
        db[rect_id].update(payload)
        save_tasks(db)
        return jsonify(status="updated")

    if request.method == "DELETE":  # ‚ùå –≤–∏–¥–∞–ª–∏—Ç–∏ –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫
        db.pop(rect_id, None)
        save_tasks(db)
        return jsonify(status="deleted")

    return jsonify(error="bad request"), 400


@app.route("/api/goods")
@login_required
@csrf.exempt  # –ò—Å–∫–ª—é—á–∞–µ–º API –∏–∑ CSRF –ø—Ä–æ–≤–µ—Ä–∫–∏
def goods():
    """–ü–µ—Ä–µ–¥–∞—î–º–æ —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤ –∑ Excel-—Ñ–∞–π–ª—É –¥–ª—è —Ñ–æ—Ä–º–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è."""
    goods_list = load_goods()
    return jsonify(goods_list)


@app.route("/api/warehouses")
@login_required
@csrf.exempt  # –ò—Å–∫–ª—é—á–∞–µ–º API –∏–∑ CSRF –ø—Ä–æ–≤–µ—Ä–∫–∏
def warehouses():
    """–ü–µ—Ä–µ–¥–∞—î–º–æ —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥—ñ–≤ –∑ Excel-—Ñ–∞–π–ª—É."""
    warehouse_list = load_warehouses()
    return jsonify(warehouse_list)


@app.route("/api/log_event", methods=["POST"])
@login_required
@csrf.exempt  # –ò—Å–∫–ª—é—á–∞–µ–º API –∏–∑ CSRF –ø—Ä–æ–≤–µ—Ä–∫–∏
def log_event():
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–±—ã—Ç–∏—è –ª–æ–≥–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π (—Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 –∑–∞–ø–∏—Å–µ–π)."""
    try:
        log_data = request.json
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º
        if (log_data.get("type") == "view" or 
            log_data.get("isViewOnly") is True):
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –ª–æ–≥ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
            return jsonify({"status": "skipped"})
            
        # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è (—Å–æ–∑–¥–∞–Ω–∏–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, —É–¥–∞–ª–µ–Ω–∏–µ –∏ —Ç.–¥.)
            
        log_file = BASE_DIR / "logs" / "changes_log.json"
        
        with log_file_lock:  # –ë–ª–æ–∫–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ —Ñ–∞–π–ª—É
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ª–æ–≥–∏ –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
            if log_file.exists():
                try:
                    with log_file.open("r", encoding="utf-8") as f:
                        content = f.read().strip()
                        if content:
                            logs = json.loads(content)
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–ø–∏—Å–æ–∫
                            if not isinstance(logs, list):
                                print(f"Warning: logs is not a list, got {type(logs)}, reinitializing...")
                                logs = []
                        else:
                            logs = []
                except (json.JSONDecodeError, Exception) as e:
                    print(f"Error reading log file: {e}, reinitializing...")
                    logs = []
            else:
                logs = []
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ –ª–æ–≥ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
            if not log_data.get("dateTime"):
                from datetime import datetime
                log_data["dateTime"] = datetime.now().strftime("%Y.%m.%d %H:%M:%S")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞
            if not log_data.get("user"):
                log_data["user"] = current_user.username
                
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞ (–Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ —Å–≤–µ—Ä—Ö—É)
            logs.insert(0, log_data)
            
            # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 100 –ª–æ–≥–æ–≤ (—Å–∞–º—ã–µ –Ω–æ–≤—ã–µ)
            if len(logs) > 100:
                logs = logs[:100]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ª–æ–≥
            try:
                with log_file.open("w", encoding="utf-8") as f:
                    json.dump(logs, f, ensure_ascii=False, indent=2)
                print(f"Successfully saved {len(logs)} logs to {log_file}")
            except Exception as write_error:
                print(f"Error writing log file: {write_error}")
                raise write_error
            
        return jsonify({"status": "ok"})
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)}), 500


@app.route("/api/change_history")
@login_required
@csrf.exempt  # –ò—Å–∫–ª—é—á–∞–µ–º API –∏–∑ CSRF –ø—Ä–æ–≤–µ—Ä–∫–∏
def change_history():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 –∑–∞–ø–∏—Å–µ–π)."""
    try:
        log_file = BASE_DIR / "logs" / "changes_log.json"
        
        with log_file_lock:  # –ë–ª–æ–∫–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ —Ñ–∞–π–ª—É
            if log_file.exists():
                try:
                    with log_file.open("r", encoding="utf-8") as f:
                        content = f.read().strip()
                        if content:
                            logs = json.loads(content)
                            if not isinstance(logs, list):
                                print(f"Warning: logs is not a list in change_history, got {type(logs)}")
                                return jsonify([])
                        else:
                            logs = []
                except (json.JSONDecodeError, Exception) as e:
                    print(f"Error reading log file in change_history: {e}")
                    return jsonify([])
                    
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–µ 100 –∑–∞–ø–∏—Å–µ–π (—Å–∞–º—ã–µ –Ω–æ–≤—ã–µ, —Ç–∞–∫ –∫–∞–∫ —Ç–µ–ø–µ—Ä—å –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –≤ –Ω–∞—á–∞–ª–æ)
                return jsonify(logs[:100] if len(logs) > 100 else logs)
            else:
                return jsonify([])
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)}), 500


def get_user_stats():
    """–û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤."""
    users = load_users()
    stats = {
        'total': len(users),
        'super_admins': sum(1 for u in users.values() if u['role'] == 'super_admin'),
        'users': sum(1 for u in users.values() if u['role'] == 'user'),
        'viewers': sum(1 for u in users.values() if u['role'] == 'viewer')
    }
    return stats

def validate_username(username):
    """–ü–æ–∫—Ä–∞—â–µ–Ω–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è —ñ–º–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
    if not username or len(username.strip()) < 3:
        return False, "–Ü–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø–æ–≤–∏–Ω–Ω–æ –º—ñ—Å—Ç–∏—Ç–∏ –º—ñ–Ω—ñ–º—É–º 3 —Å–∏–º–≤–æ–ª–∏"
    
    if len(username) > 50:
        return False, "–Ü–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –¥–æ–≤—à–µ 50 —Å–∏–º–≤–æ–ª—ñ–≤"
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –∑–∞–±–æ—Ä–æ–Ω–µ–Ω—ñ —Å–∏–º–≤–æ–ª–∏
    if not re.match(r'^[a-zA-Z0-9_-]+$', username):
        return False, "–Ü–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –º–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ –±—É–∫–≤–∏, —Ü–∏—Ñ—Ä–∏, _ —Ç–∞ -"
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –∑–∞–±–æ—Ä–æ–Ω–µ–Ω—ñ —ñ–º–µ–Ω–∞
    forbidden_names = ['admin', 'root', 'system', 'administrator', 'guest', 'null', 'undefined']
    if username.lower() in forbidden_names and username.lower() != 'admin':
        return False, "–¶–µ —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ"
    
    return True, ""

def validate_password(password):
    """–ü–æ–∫—Ä–∞—â–µ–Ω–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è –ø–∞—Ä–æ–ª—è."""
    if not password or len(password) < 8:
        return False, "–ü–∞—Ä–æ–ª—å –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ –º—ñ–Ω—ñ–º—É–º 8 —Å–∏–º–≤–æ–ª—ñ–≤"
    
    if len(password) > 128:
        return False, "–ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –¥–æ–≤—à–µ 128 —Å–∏–º–≤–æ–ª—ñ–≤"
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å –ø–∞—Ä–æ–ª—è
    has_upper = any(c.isupper() for c in password)
    has_lower = any(c.islower() for c in password)
    has_digit = any(c.isdigit() for c in password)
    
    if not (has_upper and has_lower and has_digit):
        return False, "–ü–∞—Ä–æ–ª—å –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ –≤–µ–ª–∏–∫—ñ —Ç–∞ –º–∞–ª—ñ –±—É–∫–≤–∏, —Ç–∞ —Ü–∏—Ñ—Ä–∏"
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —Å–ª–∞–±–∫—ñ –ø–∞—Ä–æ–ª—ñ
    weak_passwords = ['password', '12345678', 'qwerty123', 'admin123', 'password123']
    if password.lower() in weak_passwords:
        return False, "–¶–µ–π –ø–∞—Ä–æ–ª—å –∑–∞–Ω–∞–¥—Ç–æ –ø—Ä–æ—Å—Ç–∏–π"
    
    return True, ""


@app.route("/profile")
@login_required
def profile():
    """–ü—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
    return render_template("profile.html", user=current_user)

@app.route("/test_colors")
@login_required
def test_colors():
    """–¢–µ—Å—Ç–æ–≤–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–æ–ª—å–æ—Ä—ñ–≤."""
    return render_template("test_colors.html", user=current_user)

@app.route("/profile/change_password", methods=["POST"])
@login_required
@limiter.limit("3 per minute")  # –ú–∞–∫—Å–∏–º—É–º 3 –∑–º—ñ–Ω–∏ –ø–∞—Ä–æ–ª—è –∑–∞ —Ö–≤–∏–ª–∏–Ω—É
def change_password():
    """–ó–º—ñ–Ω–∞ –ø–∞—Ä–æ–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
    current_password = request.form.get("current_password", "")
    new_password = request.form.get("new_password", "")
    confirm_password = request.form.get("confirm_password", "")
    ip_address = request.environ.get('HTTP_X_FORWARDED_FOR', request.remote_addr)
    
    users = load_users()
    stored_password = users[current_user.username]["password"]
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è (–ø—ñ–¥—Ç—Ä–∏–º—É—î–º–æ —Ä—ñ–∑–Ω—ñ –∞–ª–≥–æ—Ä–∏—Ç–º–∏)
    if (stored_password.startswith('pbkdf2:sha256:') or 
        stored_password.startswith('scrypt:') or 
        stored_password.startswith('argon2:')):
        # –ó–∞—Ö–µ—à–æ–≤–∞–Ω–∏–π –ø–∞—Ä–æ–ª—å
        password_valid = check_password_hash(stored_password, current_password)
    else:
        # –°—Ç–∞—Ä–∏–π –Ω–µ–∑–∞—Ö–µ—à–æ–≤–∞–Ω–∏–π –ø–∞—Ä–æ–ª—å
        password_valid = (stored_password == current_password)
    
    if not password_valid:
        log_security_event("PASSWORD_CHANGE_FAILED", current_user.username, "Invalid current password", ip_address)
        flash('–ù–µ–≤—ñ—Ä–Ω–∏–π –ø–æ—Ç–æ—á–Ω–∏–π –ø–∞—Ä–æ–ª—å', 'error')
        return redirect(url_for('profile'))
    
    # –í–∞–ª—ñ–¥–∞—Ü—ñ—è –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è
    valid_password, password_error = validate_password(new_password)
    if not valid_password:
        log_security_event("PASSWORD_CHANGE_FAILED", current_user.username, f"Invalid new password: {password_error}", ip_address)
        flash(password_error, 'error')
        return redirect(url_for('profile'))
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—è
    if new_password != confirm_password:
        log_security_event("PASSWORD_CHANGE_FAILED", current_user.username, "Password confirmation mismatch", ip_address)
        flash('–ü–∞—Ä–æ–ª—ñ –Ω–µ —Å–ø—ñ–≤–ø–∞–¥–∞—é—Ç—å', 'error')
        return redirect(url_for('profile'))
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —â–æ –Ω–æ–≤–∏–π –ø–∞—Ä–æ–ª—å –≤—ñ–¥—Ä—ñ–∑–Ω—è—î—Ç—å—Å—è –≤—ñ–¥ –ø–æ—Ç–æ—á–Ω–æ–≥–æ
    if current_password == new_password:
        log_security_event("PASSWORD_CHANGE_FAILED", current_user.username, "New password same as current", ip_address)
        flash('–ù–æ–≤–∏–π –ø–∞—Ä–æ–ª—å –ø–æ–≤–∏–Ω–µ–Ω –≤—ñ–¥—Ä—ñ–∑–Ω—è—Ç–∏—Å—è –≤—ñ–¥ –ø–æ—Ç–æ—á–Ω–æ–≥–æ', 'error')
        return redirect(url_for('profile'))
    
    # –û–Ω–æ–≤–ª—é—î–º–æ –ø–∞—Ä–æ–ª—å –∑ —Ö–µ—à—É–≤–∞–Ω–Ω—è–º
    users[current_user.username]["password"] = generate_password_hash(new_password)
    users[current_user.username]["password_changed_at"] = datetime.now().isoformat()
    save_users(users)
    
    # –õ–æ–≥ –¥—ñ—ó
    log_security_event("PASSWORD_CHANGED", current_user.username, "Password successfully changed", ip_address)
    
    flash('–ü–∞—Ä–æ–ª—å —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–æ', 'success')
    return redirect(url_for('profile'))

@app.route("/admin/security")
@login_required
@role_required('super_admin')
def security_panel():
    """–ü–∞–Ω–µ–ª—å –±–µ–∑–ø–µ–∫–∏ –¥–ª—è —Å—É–ø–µ—Ä –∞–¥–º—ñ–Ω—ñ–≤."""
    # –ß–∏—Ç–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ 50 –∑–∞–ø–∏—Å—ñ–≤ –ª–æ–≥—É –±–µ–∑–ø–µ–∫–∏
    security_logs = []
    try:
        if SECURITY_LOG_FILE.exists():
            with open(SECURITY_LOG_FILE, "r", encoding="utf-8") as f:
                lines = f.readlines()
                security_logs = lines[-50:]  # –û—Å—Ç–∞–Ω–Ω—ñ 50 –∑–∞–ø–∏—Å—ñ–≤
    except Exception as e:
        flash(f'–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è –ª–æ–≥—É –±–µ–∑–ø–µ–∫–∏: {e}', 'error')
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–µ–∫–∞–ø—ñ–≤
    backup_stats = get_backup_stats()
    
    return render_template("security.html", 
                         security_logs=security_logs, 
                         backup_stats=backup_stats)

@app.route("/admin/create_backup", methods=["POST"])
@login_required
@role_required('super_admin')
def manual_backup():
    """–†—É—á–Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–µ–∫–∞–ø—É."""
    ip_address = request.environ.get('HTTP_X_FORWARDED_FOR', request.remote_addr)
    
    if create_backup():
        log_security_event("MANUAL_BACKUP_CREATED", current_user.username, "Manual backup created successfully", ip_address)
        flash('–ë–µ–∫–∞–ø —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ', 'success')
    else:
        log_security_event("MANUAL_BACKUP_FAILED", current_user.username, "Manual backup creation failed", ip_address)
        flash('–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–µ–∫–∞–ø—É', 'error')
    
    return redirect(url_for('security_panel'))

@app.route("/admin/restore_backup/<backup_name>", methods=["POST"])
@login_required
@role_required('super_admin')
def restore_backup(backup_name):
    """–í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –∑ –±–µ–∫–∞–ø—É."""
    ip_address = request.environ.get('HTTP_X_FORWARDED_FOR', request.remote_addr)
    
    try:
        backup_folder = BACKUP_DIR / backup_name
        if not backup_folder.exists():
            flash('–ë–µ–∫–∞–ø –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ', 'error')
            return redirect(url_for('security_panel'))
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –±–µ–∫–∞–ø –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å—Ç–∞–Ω—É –ø–µ—Ä–µ–¥ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è–º
        create_backup()
        
        # –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ —Ñ–∞–π–ª–∏ –∑ –±–µ–∫–∞–ø—É
        files_to_restore = [
            ("users.json", USERS_FILE),
            ("tasks.json", DATA_FILE),
            ("changes_log.json", BASE_DIR / "logs" / "changes_log.json")
        ]
        
        for backup_file, target_file in files_to_restore:
            backup_path = backup_folder / backup_file
            if backup_path.exists():
                shutil.copy2(backup_path, target_file)
        
        log_security_event("BACKUP_RESTORED", current_user.username, f"Restored from backup: {backup_name}", ip_address)
        flash(f'–î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ –∑ –±–µ–∫–∞–ø—É {backup_name}', 'success')
        
    except Exception as e:
        log_security_event("BACKUP_RESTORE_FAILED", current_user.username, f"Failed to restore backup {backup_name}: {str(e)}", ip_address)
        flash(f'–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –±–µ–∫–∞–ø—É: {e}', 'error')
    
    return redirect(url_for('security_panel'))

def get_backup_stats():
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–µ–∫–∞–ø—ñ–≤."""
    try:
        backup_folders = [d for d in BACKUP_DIR.iterdir() if d.is_dir() and d.name.startswith("backup_")]
        
        stats = {
            'total_backups': len(backup_folders),
            'backups': []
        }
        
        for backup_folder in sorted(backup_folders, reverse=True)[:10]:  # –û—Å—Ç–∞–Ω–Ω—ñ 10
            try:
                # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞—Ç—É –∑ –Ω–∞–∑–≤–∏ –ø–∞–ø–∫–∏
                date_str = backup_folder.name.replace("backup_", "")
                backup_date = datetime.strptime(date_str, "%Y%m%d_%H%M%S")
                
                # –†–æ–∑–º—ñ—Ä –±–µ–∫–∞–ø—É
                total_size = sum(f.stat().st_size for f in backup_folder.rglob('*') if f.is_file())
                
                stats['backups'].append({
                    'name': backup_folder.name,
                    'date': backup_date.strftime("%Y-%m-%d %H:%M:%S"),
                    'size': f"{total_size / 1024:.1f} KB"
                })
            except Exception as e:
                print(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –±–µ–∫–∞–ø—É {backup_folder}: {e}")
        
        return stats
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–µ–∫–∞–ø—ñ–≤: {e}")
        return {'total_backups': 0, 'backups': []}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤ –≤ Excel —Ñ–∞–π–ª
def save_goods(goods_data):
    """–ó–±–µ—Ä—ñ–≥–∞—î —Ç–æ–≤–∞—Ä–∏ –≤ —Ñ–∞–π–ª goods.xlsx, –∑–±–µ—Ä—ñ–≥–∞—é—á–∏ —ñ—Å–Ω—É—é—á—ñ –∫–æ–ª–æ–Ω–∫–∏"""
    try:
        # –°–ø–æ—á–∞—Ç–∫—É —á–∏—Ç–∞—î–º–æ —ñ—Å–Ω—É—é—á–∏–π —Ñ–∞–π–ª —â–æ–± –∑–±–µ—Ä–µ–≥—Ç–∏ —ñ–Ω—à—ñ –∫–æ–ª–æ–Ω–∫–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, —Å–∫–ª–∞–¥–∏)
        existing_columns = {}
        if GOODS_FILE.exists():
            try:
                existing_df = pd.read_excel(GOODS_FILE)
                # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤—Å—ñ –∫–æ–ª–æ–Ω–∫–∏ –∫—Ä—ñ–º –æ—Å–Ω–æ–≤–Ω–∏—Ö —Ç–æ–≤–∞—Ä–Ω–∏—Ö
                main_columns = ['–ö–∞—Ç–µ–≥–æ—Ä—ñ—è', '–ù–∞–∑–≤–∞ —Ç–æ–≤–∞—Ä—É', '–í–∞–≥–∞ (–∫–≥)', '–ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –ø–∞–ª–ª–µ—Ç–∏']
                for col in existing_df.columns:
                    if col not in main_columns:
                        existing_columns[col] = existing_df[col].tolist()
            except Exception as e:
                print(f"–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è —ñ—Å–Ω—É—é—á–æ–≥–æ —Ñ–∞–π–ª—É: {e}")
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—ñ —Ä—è–¥–∫–∏ –∑ —Ç–æ–≤–∞—Ä–∞–º–∏
        rows = []
        for category, items in goods_data.items():
            for item in items:
                rows.append({
                    '–ö–∞—Ç–µ–≥–æ—Ä—ñ—è': category,
                    '–ù–∞–∑–≤–∞ —Ç–æ–≤–∞—Ä—É': item['name'],
                    '–í–∞–≥–∞ (–∫–≥)': item['weight'],
                    '–ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –ø–∞–ª–ª–µ—Ç–∏': item.get('pallet_coef', 1.0)
                })
        
        df = pd.DataFrame(rows)
        
        # –î–æ–¥–∞—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –∫–æ–ª–æ–Ω–∫–∏
        for col_name, col_data in existing_columns.items():
            # –ü—ñ–¥–≥–∞–Ω—è—î–º–æ –¥–æ–≤–∂–∏–Ω—É –∫–æ–ª–æ–Ω–∫–∏ –ø—ñ–¥ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä—è–¥–∫—ñ–≤
            if len(col_data) > len(df):
                df[col_name] = col_data[:len(df)]
            elif len(col_data) < len(df):
                df[col_name] = col_data + [''] * (len(df) - len(col_data))
            else:
                df[col_name] = col_data
        
        df.to_excel(GOODS_FILE, index=False)
        print(f"–¢–æ–≤–∞—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ {GOODS_FILE} (–∑–±–µ—Ä–µ–∂–µ–Ω–æ {len(df)} —Ä—è–¥–∫—ñ–≤)")
        return True
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤: {e}")
        return False

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å–∫–ª–∞–¥—ñ–≤ –≤ Excel —Ñ–∞–π–ª
def save_warehouses(warehouses_list):
    """–ó–±–µ—Ä—ñ–≥–∞—î —Å–∫–ª–∞–¥–∏ –≤ —Ñ–∞–π–ª goods.xlsx (–∫–æ–ª–æ–Ω–∫–∞ '–°–∫–ª–∞–¥–∏'), –∑–±–µ—Ä—ñ–≥–∞—é—á–∏ —ñ—Å–Ω—É—é—á—ñ —Ç–æ–≤–∞—Ä–∏"""
    try:
        # –°–ø–æ—á–∞—Ç–∫—É —á–∏—Ç–∞—î–º–æ —ñ—Å–Ω—É—é—á—ñ –¥–∞–Ω—ñ —Ç–æ–≤–∞—Ä—ñ–≤
        if GOODS_FILE.exists():
            df = pd.read_excel(GOODS_FILE)
        else:
            # –Ø–∫—â–æ —Ñ–∞–π–ª—É –Ω–µ–º–∞—î, —Å—Ç–≤–æ—Ä—é—î–º–æ –±–∞–∑–æ–≤—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            df = pd.DataFrame({
                '–ö–∞—Ç–µ–≥–æ—Ä—ñ—è': [''],
                '–ù–∞–∑–≤–∞ —Ç–æ–≤–∞—Ä—É': [''],
                '–í–∞–≥–∞ (–∫–≥)': [0.0],
                '–ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –ø–∞–ª–ª–µ—Ç–∏': [1.0]
            })
        
        # –ü—ñ–¥–≥–∞–Ω—è—î–º–æ –¥–æ–≤–∂–∏–Ω—É —Å–ø–∏—Å–∫—É —Å–∫–ª–∞–¥—ñ–≤ –ø—ñ–¥ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä—è–¥–∫—ñ–≤ —Ç–æ–≤–∞—Ä—ñ–≤
        max_rows = max(len(df), len(warehouses_list))
        
        # –Ø–∫—â–æ —Å–∫–ª–∞–¥—ñ–≤ –º–µ–Ω—à–µ –Ω—ñ–∂ —Ç–æ–≤–∞—Ä—ñ–≤, –¥–æ–ø–æ–≤–Ω—é—î–º–æ –ø—É—Å—Ç–∏–º–∏ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏
        if len(warehouses_list) < max_rows:
            warehouses_padded = warehouses_list + [''] * (max_rows - len(warehouses_list))
        else:
            warehouses_padded = warehouses_list[:max_rows]
        
        # –Ø–∫—â–æ —Ç–æ–≤–∞—Ä—ñ–≤ –º–µ–Ω—à–µ –Ω—ñ–∂ —Å–∫–ª–∞–¥—ñ–≤, –¥–æ–¥–∞—î–º–æ –ø—É—Å—Ç—ñ —Ä—è–¥–∫–∏ —Ç–æ–≤–∞—Ä—ñ–≤
        if len(df) < len(warehouses_list):
            empty_rows = []
            for i in range(len(warehouses_list) - len(df)):
                empty_rows.append({
                    '–ö–∞—Ç–µ–≥–æ—Ä—ñ—è': '',
                    '–ù–∞–∑–≤–∞ —Ç–æ–≤–∞—Ä—É': '',
                    '–í–∞–≥–∞ (–∫–≥)': 0.0,
                    '–ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –ø–∞–ª–ª–µ—Ç–∏': 1.0
                })
            df = pd.concat([df, pd.DataFrame(empty_rows)], ignore_index=True)
        
        # –î–æ–¥–∞—î–º–æ –∞–±–æ –æ–Ω–æ–≤–ª—é—î–º–æ –∫–æ–ª–æ–Ω–∫—É —Å–∫–ª–∞–¥—ñ–≤
        df['–°–∫–ª–∞–¥–∏'] = warehouses_padded
        
        df.to_excel(GOODS_FILE, index=False)
        print(f"–°–∫–ª–∞–¥–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ {GOODS_FILE} ({len(warehouses_list)} —Å–∫–ª–∞–¥—ñ–≤)")
        return True
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å–∫–ª–∞–¥—ñ–≤: {e}")
        return False
        print(f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å–∫–ª–∞–¥—ñ–≤: {e}")
        return False

# üîç HEALTH CHECK ENDPOINT –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
@app.route('/health')
def health_check():
    """Health check endpoint –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É —Å—Ç–∞–Ω—É –¥–æ–¥–∞—Ç–∫—É."""
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ —Ñ–∞–π–ª—ñ–≤
        users_exists = USERS_FILE.exists()
        goods_exists = GOODS_FILE.exists()
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ –ª–æ–≥—ñ–≤
        logs_dir = BASE_DIR / "logs"
        logs_accessible = logs_dir.exists()
        
        status = {
            'status': 'healthy',
            'timestamp': datetime.now().isoformat(),
            'version': '1.0',
            'files': {
                'users_json': users_exists,
                'goods_xlsx': goods_exists,
                'logs_directory': logs_accessible
            },
            'csrf_enabled': hasattr(app, 'csrf') or 'csrf' in str(app.before_request_funcs),
            'rate_limiting': 'limiter' in globals()
        }
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤
        if not users_exists or not goods_exists:
            status['status'] = 'degraded'
            return jsonify(status), 503
            
        return jsonify(status), 200
        
    except Exception as e:
        return jsonify({
            'status': 'unhealthy',
            'error': str(e),
            'timestamp': datetime.now().isoformat()
        }), 503

@app.route("/api/goods_management", methods=["GET", "POST", "PUT", "DELETE"])
@login_required
@role_required('super_admin')
@csrf.exempt
def goods_management():
    """–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ç–æ–≤–∞—Ä–∞–º–∏ - —Ç—ñ–ª—å–∫–∏ –¥–ª—è —Å—É–ø–µ—Ä –∞–¥–º—ñ–Ω–∞"""
    
    if request.method == "GET":
        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä—ñ–≤
        goods_list = load_goods()
        return jsonify(goods_list)
    
    elif request.method == "POST":
        # –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä—É
        try:
            data = request.get_json()
            category = data.get('category', '').strip()
            name = data.get('name', '').strip()
            weight = float(data.get('weight', 0))
            pallet_coef = float(data.get('pallet_coef', 1.0))
            
            if not category or not name:
                return jsonify({'error': '–ö–∞—Ç–µ–≥–æ—Ä—ñ—è —Ç–∞ –Ω–∞–∑–≤–∞ —Ç–æ–≤–∞—Ä—É –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ'}), 400
            
            # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ —Ç–æ–≤–∞—Ä–∏
            goods_data = load_goods()
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ç–æ–≤–∞—Ä –≤–∂–µ —ñ—Å–Ω—É—î
            if category in goods_data:
                for item in goods_data[category]:
                    if item['name'].lower() == name.lower():
                        return jsonify({'error': '–¢–æ–≤–∞—Ä –∑ —Ç–∞–∫–æ—é –Ω–∞–∑–≤–æ—é –≤–∂–µ —ñ—Å–Ω—É—î –≤ —Ü—ñ–π –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó'}), 400
            else:
                goods_data[category] = []
            
            # –î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π —Ç–æ–≤–∞—Ä
            goods_data[category].append({
                'name': name,
                'weight': weight,
                'pallet_coef': pallet_coef
            })
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ Excel
            if save_goods(goods_data):
                return jsonify({'success': True, 'message': '–¢–æ–≤–∞—Ä —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ'})
            else:
                return jsonify({'error': '–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É'}), 500
                
        except Exception as e:
            return jsonify({'error': f'–ü–æ–º–∏–ª–∫–∞: {str(e)}'}), 500
    
    elif request.method == "PUT":
        # –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É
        try:
            data = request.get_json()
            old_category = data.get('old_category', '').strip()
            old_name = data.get('old_name', '').strip()
            new_category = data.get('category', '').strip()
            new_name = data.get('name', '').strip()
            weight = float(data.get('weight', 0))
            pallet_coef = float(data.get('pallet_coef', 1.0))
            
            if not old_category or not old_name or not new_category or not new_name:
                return jsonify({'error': '–í—Å—ñ –ø–æ–ª—è –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ'}), 400
            
            # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ —Ç–æ–≤–∞—Ä–∏
            goods_data = load_goods()
            
            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Ç–∞ –≤–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä–∏–π —Ç–æ–≤–∞—Ä
            found = False
            if old_category in goods_data:
                for i, item in enumerate(goods_data[old_category]):
                    if item['name'].lower() == old_name.lower():
                        del goods_data[old_category][i]
                        found = True
                        break
                        
                # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ—Ä–æ–∂–Ω—é –∫–∞—Ç–µ–≥–æ—Ä—ñ—é
                if not goods_data[old_category]:
                    del goods_data[old_category]
            
            if not found:
                return jsonify({'error': '–¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'}), 404
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–æ–≤–∏–π —Ç–æ–≤–∞—Ä –Ω–µ –¥—É–±–ª—é—î—Ç—å—Å—è
            if new_category in goods_data:
                for item in goods_data[new_category]:
                    if item['name'].lower() == new_name.lower():
                        return jsonify({'error': '–¢–æ–≤–∞—Ä –∑ —Ç–∞–∫–æ—é –Ω–∞–∑–≤–æ—é –≤–∂–µ —ñ—Å–Ω—É—î –≤ —Ü—ñ–π –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó'}), 400
            else:
                goods_data[new_category] = []
            
            # –î–æ–¥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π —Ç–æ–≤–∞—Ä
            goods_data[new_category].append({
                'name': new_name,
                'weight': weight,
                'pallet_coef': pallet_coef
            })
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ Excel
            if save_goods(goods_data):
                return jsonify({'success': True, 'message': '–¢–æ–≤–∞—Ä —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ'})
            else:
                return jsonify({'error': '–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É'}), 500
                
        except Exception as e:
            return jsonify({'error': f'–ü–æ–º–∏–ª–∫–∞: {str(e)}'}), 500
    
    elif request.method == "DELETE":
        # –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É
        try:
            data = request.get_json()
            category = data.get('category', '').strip()
            name = data.get('name', '').strip()
            
            if not category or not name:
                return jsonify({'error': '–ö–∞—Ç–µ–≥–æ—Ä—ñ—è —Ç–∞ –Ω–∞–∑–≤–∞ —Ç–æ–≤–∞—Ä—É –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ'}), 400
            
            # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ —Ç–æ–≤–∞—Ä–∏
            goods_data = load_goods()
            
            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Ç–∞ –≤–∏–¥–∞–ª—è—î–º–æ —Ç–æ–≤–∞—Ä
            found = False
            if category in goods_data:
                for i, item in enumerate(goods_data[category]):
                    if item['name'].lower() == name.lower():
                        del goods_data[category][i]
                        found = True
                        break
                        
                # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ—Ä–æ–∂–Ω—é –∫–∞—Ç–µ–≥–æ—Ä—ñ—é
                if not goods_data[category]:
                    del goods_data[category]
            
            if not found:
                return jsonify({'error': '–¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'}), 404
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ Excel
            if save_goods(goods_data):
                return jsonify({'success': True, 'message': '–¢–æ–≤–∞—Ä —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ'})
            else:
                return jsonify({'error': '–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—ñ—Å–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è'}), 500
                
        except Exception as e:
            return jsonify({'error': f'–ü–æ–º–∏–ª–∫–∞: {str(e)}'}), 500


# API –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É —Ç–æ–≤–∞—Ä—ñ–≤ –≤ Excel
@app.route("/api/goods_export")
@login_required
@role_required('super_admin')
def goods_export():
    """–ï–∫—Å–ø–æ—Ä—Ç —Ç–æ–≤–∞—Ä—ñ–≤ –≤ Excel —Ñ–∞–π–ª"""
    try:
        if not GOODS_FILE.exists():
            return jsonify({'error': '–§–∞–π–ª —Ç–æ–≤–∞—Ä—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'}), 404
        
        return send_file(
            GOODS_FILE,
            as_attachment=True,
            download_name='goods_export.xlsx',
            mimetype='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        )
    except Exception as e:
        return jsonify({'error': f'–ü–æ–º–∏–ª–∫–∞ –µ–∫—Å–ø–æ—Ä—Ç—É: {str(e)}'}), 500


# API –¥–ª—è —ñ–º–ø–æ—Ä—Ç—É —Ç–æ–≤–∞—Ä—ñ–≤ –∑ Excel
@app.route("/api/goods_import", methods=["POST"])
@login_required
@role_required('super_admin')
def goods_import():
    """–Ü–º–ø–æ—Ä—Ç —Ç–æ–≤–∞—Ä—ñ–≤ –∑ Excel —Ñ–∞–π–ª—É"""
    try:
        if 'file' not in request.files:
            return jsonify({'error': '–§–∞–π–ª –Ω–µ –Ω–∞–¥–∞–Ω–æ'}), 400
        
        file = request.files['file']
        if file.filename == '':
            return jsonify({'error': '–§–∞–π–ª –Ω–µ –≤–∏–±—Ä–∞–Ω–æ'}), 400
        
        if not file.filename.endswith(('.xlsx', '.xls')):
            return jsonify({'error': '–ü—ñ–¥—Ç—Ä–∏–º—É—é—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ Excel —Ñ–∞–π–ª–∏ (.xlsx, .xls)'}), 400
        
        # –ß–∏—Ç–∞—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π —Ñ–∞–π–ª
        df = pd.read_excel(file)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –ø–æ—Ç—Ä—ñ–±–Ω—ñ –∫–æ–ª–æ–Ω–∫–∏
        required_columns = ['–ö–∞—Ç–µ–≥–æ—Ä—ñ—è', '–ù–∞–∑–≤–∞ —Ç–æ–≤–∞—Ä—É', '–í–∞–≥–∞ (–∫–≥)', '–ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –ø–∞–ª–ª–µ—Ç–∏']
        missing_columns = [col for col in required_columns if col not in df.columns]
        
        if missing_columns:
            return jsonify({'error': f'–í—ñ–¥—Å—É—Ç–Ω—ñ –∫–æ–ª–æ–Ω–∫–∏: {", ".join(missing_columns)}'}), 400
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ñ–∞–π–ª —è–∫ –Ω–æ–≤–∏–π goods.xlsx
        df.to_excel(GOODS_FILE, index=False)
        
        return jsonify({'success': True, 'message': '–¢–æ–≤–∞—Ä–∏ —É—Å–ø—ñ—à–Ω–æ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ'})
        
    except Exception as e:
        return jsonify({'error': f'–ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É: {str(e)}'}), 500


# –°—Ç–æ—Ä—ñ–Ω–∫–∞ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ç–æ–≤–∞—Ä–∞–º–∏
@app.route("/goods_management")
@login_required
@role_required('super_admin')
def goods_management_page():
    """–°—Ç–æ—Ä—ñ–Ω–∫–∞ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ç–æ–≤–∞—Ä–∞–º–∏ - —Ç—ñ–ª—å–∫–∏ –¥–ª—è —Å—É–ø–µ—Ä –∞–¥–º—ñ–Ω–∞"""
    return render_template("goods_management.html", user=current_user)


# ==================== API –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Å–∫–ª–∞–¥–∞–º–∏ ====================

@app.route("/api/warehouses_management", methods=["GET", "POST", "PUT", "DELETE"])
@login_required
@role_required('super_admin')
@csrf.exempt
def warehouses_management():
    """–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Å–∫–ª–∞–¥–∞–º–∏ - —Ç—ñ–ª—å–∫–∏ –¥–ª—è —Å—É–ø–µ—Ä –∞–¥–º—ñ–Ω–∞"""
    
    if request.method == "GET":
        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É —Å–∫–ª–∞–¥—ñ–≤
        warehouses_list = load_warehouses()
        return jsonify(warehouses_list)
    
    elif request.method == "POST":
        # –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Å–∫–ª–∞–¥—É
        try:
            data = request.get_json()
            name = data.get('name', '').strip()
            
            if not name:
                return jsonify({'error': '–ù–∞–∑–≤–∞ —Å–∫–ª–∞–¥—É –æ–±–æ–≤\'—è–∑–∫–æ–≤–∞'}), 400
            
            # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ —Å–∫–ª–∞–¥–∏
            warehouses_list = load_warehouses()
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Å–∫–ª–∞–¥ –≤–∂–µ —ñ—Å–Ω—É—î
            if name in warehouses_list:
                return jsonify({'error': '–°–∫–ª–∞–¥ –∑ —Ç–∞–∫–æ—é –Ω–∞–∑–≤–æ—é –≤–∂–µ —ñ—Å–Ω—É—î'}), 400
            
            # –î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π —Å–∫–ª–∞–¥
            warehouses_list.append(name)
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ Excel
            if save_warehouses(warehouses_list):
                return jsonify({'success': True, 'message': '–°–∫–ª–∞–¥ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ'})
            else:
                return jsonify({'error': '–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å–∫–ª–∞–¥—É'}), 500
                
        except Exception as e:
            return jsonify({'error': f'–ü–æ–º–∏–ª–∫–∞: {str(e)}'}), 500
    
    elif request.method == "PUT":
        # –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Å–∫–ª–∞–¥—É
        try:
            data = request.get_json()
            old_name = data.get('old_name', '').strip()
            new_name = data.get('name', '').strip()
            
            if not old_name or not new_name:
                return jsonify({'error': '–°—Ç–∞—Ä–∞ —Ç–∞ –Ω–æ–≤–∞ –Ω–∞–∑–≤–∞ —Å–∫–ª–∞–¥—É –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ'}), 400
            
            # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ —Å–∫–ª–∞–¥–∏
            warehouses_list = load_warehouses()
            
            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Ç–∞ –æ–Ω–æ–≤–ª—é—î–º–æ —Å–∫–ª–∞–¥
            try:
                index = warehouses_list.index(old_name)
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–æ–≤–∞ –Ω–∞–∑–≤–∞ –Ω–µ –¥—É–±–ª—é—î—Ç—å—Å—è
                if new_name in warehouses_list and new_name != old_name:
                    return jsonify({'error': '–°–∫–ª–∞–¥ –∑ —Ç–∞–∫–æ—é –Ω–∞–∑–≤–æ—é –≤–∂–µ —ñ—Å–Ω—É—î'}), 400
                
                warehouses_list[index] = new_name
                
                # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ Excel
                if save_warehouses(warehouses_list):
                    return jsonify({'success': True, 'message': '–°–∫–ª–∞–¥ —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ'})
                else:
                    return jsonify({'error': '–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å–∫–ª–∞–¥—É'}), 500
                    
            except ValueError:
                return jsonify({'error': '–°–∫–ª–∞–¥ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'}), 404
                
        except Exception as e:
            return jsonify({'error': f'–ü–æ–º–∏–ª–∫–∞: {str(e)}'}), 500
    
    elif request.method == "DELETE":
        # –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å–∫–ª–∞–¥—É
        try:
            data = request.get_json()
            name = data.get('name', '').strip()
            
            if not name:
                return jsonify({'error': '–ù–∞–∑–≤–∞ —Å–∫–ª–∞–¥—É –æ–±–æ–≤\'—è–∑–∫–æ–≤–∞'}), 400
            
            # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ —Å–∫–ª–∞–¥–∏
            warehouses_list = load_warehouses()
            
            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Ç–∞ –≤–∏–¥–∞–ª—è—î–º–æ —Å–∫–ª–∞–¥
            try:
                warehouses_list.remove(name)
                
                # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ Excel
                if save_warehouses(warehouses_list):
                    return jsonify({'success': True, 'message': '–°–∫–ª–∞–¥ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ'})
                else:
                    return jsonify({'error': '–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—ñ—Å–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è'}), 500
                    
            except ValueError:
                return jsonify({'error': '–°–∫–ª–∞–¥ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'}), 404
                
        except Exception as e:
            return jsonify({'error': f'–ü–æ–º–∏–ª–∫–∞: {str(e)}'}), 500


# –°—Ç–æ—Ä—ñ–Ω–∫–∞ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Å–∫–ª–∞–¥–∞–º–∏
@app.route("/warehouses_management")
@login_required
@role_required('super_admin')
def warehouses_management_page():
    """–°—Ç–æ—Ä—ñ–Ω–∫–∞ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Å–∫–ª–∞–¥–∞–º–∏ - —Ç—ñ–ª—å–∫–∏ –¥–ª—è —Å—É–ø–µ—Ä –∞–¥–º—ñ–Ω–∞"""
    return render_template("warehouses_management.html", user=current_user)


# ==================== –¢–ï–°–¢–û–í–ò–ô –†–û–£–¢ –î–õ–Ø –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ò ====================

@app.route("/test_goods_api")
@login_required
@role_required('super_admin')
def test_goods_api():
    """–¢–µ—Å—Ç–æ–≤–∏–π —Ä–æ—É—Ç –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Ç–æ–≤–∞—Ä—ñ–≤ —Ç–∞ —Å–∫–ª–∞–¥—ñ–≤"""
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ñ–∞–π–ª —Ç–æ–≤–∞—Ä—ñ–≤
        result = {"status": "success", "tests": []}
        
        # –¢–µ—Å—Ç 1: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—É
        if GOODS_FILE.exists():
            result["tests"].append({"name": "–§–∞–π–ª —ñ—Å–Ω—É—î", "status": "‚úÖ", "details": str(GOODS_FILE)})
        else:
            result["tests"].append({"name": "–§–∞–π–ª —ñ—Å–Ω—É—î", "status": "‚ùå", "details": "–§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"})
            
        # –¢–µ—Å—Ç 2: –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤
        try:
            goods = load_goods()
            total_items = sum(len(items) for items in goods.values())
            result["tests"].append({
                "name": "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤", 
                "status": "‚úÖ", 
                "details": f"–ö–∞—Ç–µ–≥–æ—Ä—ñ–π: {len(goods)}, —Ç–æ–≤–∞—Ä—ñ–≤: {total_items}"
            })
            result["goods"] = goods
        except Exception as e:
            result["tests"].append({"name": "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤", "status": "‚ùå", "details": str(e)})
            
        # –¢–µ—Å—Ç 3: –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–∫–ª–∞–¥—ñ–≤
        try:
            warehouses = load_warehouses()
            result["tests"].append({
                "name": "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–∫–ª–∞–¥—ñ–≤", 
                "status": "‚úÖ", 
                "details": f"–°–∫–ª–∞–¥—ñ–≤: {len(warehouses)}"
            })
            result["warehouses"] = warehouses
        except Exception as e:
            result["tests"].append({"name": "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–∫–ª–∞–¥—ñ–≤", "status": "‚ùå", "details": str(e)})
            
        # –¢–µ—Å—Ç 4: –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä—É
        try:
            test_goods = goods.copy() if 'goods' in locals() else {}
            if "–¢–µ—Å—Ç" not in test_goods:
                test_goods["–¢–µ—Å—Ç"] = []
            
            test_item = {
                "name": f"–¢–µ—Å—Ç–æ–≤–∏–π —Ç–æ–≤–∞—Ä {datetime.now().strftime('%H:%M:%S')}",
                "weight": 1.0,
                "pallet_coef": 1.0
            }
            test_goods["–¢–µ—Å—Ç"].append(test_item)
            
            # –°–ø—Ä–æ–±—É—î–º–æ –∑–±–µ—Ä–µ–≥—Ç–∏
            if save_goods(test_goods):
                result["tests"].append({
                    "name": "–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É", 
                    "status": "‚úÖ", 
                    "details": f"–î–æ–¥–∞–Ω–æ —Ç–µ—Å—Ç–æ–≤–∏–π —Ç–æ–≤–∞—Ä: {test_item['name']}"
                })
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∑–±–µ—Ä–µ–≥–ª–∏—Å—è –≤—Å—ñ —Ç–æ–≤–∞—Ä–∏
                reloaded_goods = load_goods()
                reloaded_total = sum(len(items) for items in reloaded_goods.values())
                
                if reloaded_total >= total_items:
                    result["tests"].append({
                        "name": "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è", 
                        "status": "‚úÖ", 
                        "details": f"–¢–æ–≤–∞—Ä—ñ–≤ –ø—ñ—Å–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è: {reloaded_total} (–±—É–ª–æ: {total_items})"
                    })
                else:
                    result["tests"].append({
                        "name": "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è", 
                        "status": "‚ùå", 
                        "details": f"–í–¢–†–ê–ß–ï–ù–û –¢–û–í–ê–†–ò! –ë—É–ª–æ: {total_items}, —Å—Ç–∞–ª–æ: {reloaded_total}"
                    })
            else:
                result["tests"].append({"name": "–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É", "status": "‚ùå", "details": "–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è"})
                
        except Exception as e:
            result["tests"].append({"name": "–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É", "status": "‚ùå", "details": str(e)})
            
        return jsonify(result)
        
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)}), 500


# ==================== –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç–∞ –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ ====================

if __name__ == "__main__":
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö —Ç–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    print("üöÄ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º–∏...")
    
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, —è–∫—â–æ —Ñ–∞–π–ª –Ω–µ —ñ—Å–Ω—É—î
    if not USERS_FILE.exists():
        print("üìù –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ñ–∞–π–ª—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤...")
        # –°—Ç–≤–æ—Ä—é—î–º–æ –±–∞–∑–æ–≤–∏–π —Ñ–∞–π–ª –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        with USERS_FILE.open("w", encoding="utf-8") as f:
            json.dump({}, f, ensure_ascii=False, indent=2)
    
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ Excel —Ñ–∞–π–ª —Ç–æ–≤–∞—Ä—ñ–≤, —è–∫—â–æ –Ω–µ —ñ—Å–Ω—É—î
    if not GOODS_FILE.exists():
        print("üìä –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ñ–∞–π–ª—É —Ç–æ–≤–∞—Ä—ñ–≤...")
        # –°—Ç–≤–æ—Ä—é—î–º–æ –±–∞–∑–æ–≤–∏–π Excel —Ñ–∞–π–ª
        sample_data = pd.DataFrame({
            '–ö–∞—Ç–µ–≥–æ—Ä—ñ—è': ['–§—Ä—É–∫—Ç–∏', '–û–≤–æ—á—ñ', '–ú–æ–ª–æ—á–Ω—ñ'],
            '–ù–∞–∑–≤–∞ —Ç–æ–≤–∞—Ä—É': ['–Ø–±–ª—É–∫–∞', '–ú–æ—Ä–∫–≤–∞', '–ú–æ–ª–æ–∫–æ'],
            '–í–∞–≥–∞ (–∫–≥)': [1.0, 0.5, 1.0],
            '–ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –ø–∞–ª–ª–µ—Ç–∏': [1.0, 1.2, 0.8],
            '–°–∫–ª–∞–¥–∏': ['–°–∫–ª–∞–¥ ‚Ññ1', '–°–∫–ª–∞–¥ ‚Ññ2', '–°–∫–ª–∞–¥ ‚Ññ3']
        })
        sample_data.to_excel(GOODS_FILE, index=False)
        print(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –ø—Ä–∏–∫–ª–∞–¥ —Ç–æ–≤–∞—Ä—ñ–≤ —É {GOODS_FILE}")
    
    print("‚úÖ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print(f"üåê –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ http://127.0.0.1:5000")
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ Flask —Å–µ—Ä–≤–µ—Ä
    app.run(
        host="127.0.0.1",
        port=5000,
        debug=True,
        use_reloader=False  # –í–∏–º–∏–∫–∞—î–º–æ reloader —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –ø–æ–¥–≤—ñ–π–Ω–æ—ó —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
    )
