#!/usr/bin/env python3
# run_global_secure.py - üåç –ë–µ–∑–ø–µ—á–Ω–∏–π –∑–∞–ø—É—Å–∫ –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø—É

import os
import sys
import secrets
import logging
from pathlib import Path
from datetime import datetime
import subprocess
import signal
import atexit

# –Ü–º–ø–æ—Ä—Ç Flask —Ç–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤
try:
    from flask import Flask
    from global_config import GlobalConfig, SecureGlobalConfig
    import app as main_app
except ImportError as e:
    print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É: {e}")
    print("–í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ: pip install -r requirements.txt")
    sys.exit(1)

class GlobalServerManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –±–µ–∑–ø–µ—á–Ω–æ–≥–æ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞."""
    
    def __init__(self, secure_mode=True):
        self.secure_mode = secure_mode
        self.config = SecureGlobalConfig if secure_mode else GlobalConfig
        self.ngrok_process = None
        self.server_pid = None
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
        self.setup_logging()
        
    def setup_logging(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ä–æ–∑—à–∏—Ä–µ–Ω–æ–≥–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è."""
        Path('logs').mkdir(exist_ok=True)
        
        # –û—Å–Ω–æ–≤–Ω–∏–π –ª–æ–≥–µ—Ä
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s [%(levelname)s] %(name)s: %(message)s',
            handlers=[
                logging.FileHandler('logs/global_server.log'),
                logging.StreamHandler(sys.stdout)
            ]
        )
        
        self.logger = logging.getLogger('GlobalServer')
        
    def check_security_requirements(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∏–º–æ–≥ –±–µ–∑–ø–µ–∫–∏."""
        self.logger.info("üîí –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∏–º–æ–≥ –±–µ–∑–ø–µ–∫–∏...")
        
        issues = []
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
        secret_file = Path('.secret_key')
        if not secret_file.exists():
            self.logger.warning("–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –Ω–æ–≤–æ–≥–æ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞...")
            secret_file.write_text(secrets.token_hex(32))
        
        secret_key = secret_file.read_text().strip()
        if len(secret_key) < 32:
            issues.append("–°–µ–∫—Ä–µ—Ç–Ω–∏–π –∫–ª—é—á –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∏–π")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤
        required_files = ['users.json', 'goods.xlsx']
        for file_path in required_files:
            if not Path(file_path).exists():
                issues.append(f"–í—ñ–¥—Å—É—Ç–Ω—ñ–π –∫—Ä–∏—Ç–∏—á–Ω–∏–π —Ñ–∞–π–ª: {file_path}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
        try:
            from flask_wtf.csrf import CSRFProtect
            from flask_limiter import Limiter
        except ImportError:
            issues.append("–í—ñ–¥—Å—É—Ç–Ω—ñ –∫—Ä–∏—Ç–∏—á–Ω—ñ –º–æ–¥—É–ª—ñ –±–µ–∑–ø–µ–∫–∏")
        
        if issues:
            self.logger.error("‚ùå –ó–Ω–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º–∏ –±–µ–∑–ø–µ–∫–∏:")
            for issue in issues:
                self.logger.error(f"  - {issue}")
            return False
        
        self.logger.info("‚úÖ –í—Å—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –±–µ–∑–ø–µ–∫–∏ –ø—Ä–æ–π–¥–µ–Ω–æ")
        return True
        
    def check_ports(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ –ø–æ—Ä—Ç—ñ–≤."""
        import socket
        
        ports_to_check = [5000, 4040]
        
        for port in ports_to_check:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            result = sock.connect_ex(('127.0.0.1', port))
            sock.close()
            
            if result == 0:
                self.logger.error(f"‚ùå –ü–æ—Ä—Ç {port} –≤–∂–µ –∑–∞–π–Ω—è—Ç–∏–π")
                return False
                
        self.logger.info("‚úÖ –í—Å—ñ –ø–æ—Ä—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ")
        return True
        
    def setup_ngrok(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ngrok."""
        self.logger.info("üåê –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ngrok...")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ ngrok
        try:
            result = subprocess.run(['ngrok', 'version'], 
                                  capture_output=True, text=True, timeout=5)
            if result.returncode != 0:
                raise FileNotFoundError
        except (FileNotFoundError, subprocess.TimeoutExpired):
            self.logger.error("‚ùå ngrok –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –∑ https://ngrok.com/")
            return False
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó ngrok
        ngrok_config = Path.home() / '.ngrok2' / 'ngrok.yml'
        ngrok_config.parent.mkdir(exist_ok=True)
        
        if not ngrok_config.exists():
            config_content = f"""version: "2"
authtoken: YOUR_NGROK_AUTH_TOKEN_HERE
tunnels:
  gantt-calendar:
    addr: 5000
    proto: http
    host_header: localhost:5000
    bind_tls: true
"""
            ngrok_config.write_text(config_content)
            self.logger.warning("‚ö†Ô∏è  –ù–∞–ª–∞—à—Ç—É–π—Ç–µ ngrok auth token —É —Ñ–∞–π–ª—ñ:")
            self.logger.warning(f"   {ngrok_config}")
            
        return True
        
    def start_ngrok(self):
        """–ó–∞–ø—É—Å–∫ ngrok."""
        self.logger.info("üöÄ –ó–∞–ø—É—Å–∫ ngrok...")
        
        try:
            # –ó–∞–ø—É—Å–∫ ngrok —É —Ñ–æ–Ω–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ
            self.ngrok_process = subprocess.Popen(
                ['ngrok', 'http', '5000', '--log=stdout'],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True
            )
            
            # –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑–∞–ø—É—Å–∫—É
            import time
            time.sleep(3)
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É
            if self.ngrok_process.poll() is not None:
                stdout, stderr = self.ngrok_process.communicate()
                self.logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É ngrok: {stderr}")
                return False
                
            self.logger.info("‚úÖ ngrok –∑–∞–ø—É—â–µ–Ω–æ")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É ngrok: {e}")
            return False
            
    def get_public_url(self):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—É–±–ª—ñ—á–Ω–æ—ó URL."""
        import time
        import requests
        
        for attempt in range(10):
            try:
                response = requests.get('http://localhost:4040/api/tunnels', timeout=2)
                if response.status_code == 200:
                    data = response.json()
                    tunnels = data.get('tunnels', [])
                    
                    for tunnel in tunnels:
                        if tunnel.get('proto') == 'https':
                            public_url = tunnel['public_url']
                            self.logger.info(f"üåç –ü—É–±–ª—ñ—á–Ω–∞ URL: {public_url}")
                            
                            # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è URL
                            Path('public_url.txt').write_text(public_url)
                            return public_url
                            
            except Exception as e:
                self.logger.debug(f"–°–ø—Ä–æ–±–∞ {attempt + 1}: {e}")
                time.sleep(1)
                
        self.logger.warning("‚ö†Ô∏è  –ù–µ –≤–¥–∞–ª–æ—Å—å –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—É–±–ª—ñ—á–Ω—É URL")
        return None
        
    def configure_flask_app(self):
        """–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è Flask –¥–æ–¥–∞—Ç–∫—É –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø—É."""
        self.logger.info("‚öôÔ∏è  –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è Flask...")
        
        # –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
        main_app.app.config.from_object(self.config)
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
        self.config.init_app(main_app.app)
        
        # –î–æ–¥–∞–≤–∞–Ω–Ω—è middleware –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø—É
        @main_app.app.before_request
        def log_request_info():
            from flask import request
            main_app.app.logger.info(
                f"ACCESS: {request.remote_addr} - {request.method} {request.path}"
            )
            
        # –î–æ–¥–∞–≤–∞–Ω–Ω—è middleware –¥–ª—è –±–µ–∑–ø–µ–∫–∏
        @main_app.app.after_request
        def add_global_security_headers(response):
            # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø—É
            response.headers['X-Robots-Tag'] = 'noindex, nofollow'
            response.headers['X-Global-Access'] = 'ngrok-tunnel'
            return response
            
        self.logger.info("‚úÖ Flask —Å–∫–æ–Ω—Ñ—ñ–≥—É—Ä–æ–≤–∞–Ω–æ")
        
    def start_server(self):
        """–ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞."""
        self.logger.info("üöÄ –ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞...")
        
        try:
            # –ó–∞–ø—É—Å–∫ —É –ø—Ä–æ–¥–∞–∫—à–Ω —Ä–µ–∂–∏–º—ñ
            main_app.app.run(
                host='127.0.0.1',
                port=5000,
                debug=False,
                threaded=True
            )
        except KeyboardInterrupt:
            self.logger.info("üõë –û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª –∑—É–ø–∏–Ω–∫–∏")
            self.cleanup()
        except Exception as e:
            self.logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
            self.cleanup()
            
    def cleanup(self):
        """–û—á–∏—â–µ–Ω–Ω—è —Ä–µ—Å—É—Ä—Å—ñ–≤."""
        self.logger.info("üßπ –û—á–∏—â–µ–Ω–Ω—è —Ä–µ—Å—É—Ä—Å—ñ–≤...")
        
        # –ó—É–ø–∏–Ω–∫–∞ ngrok
        if self.ngrok_process:
            self.ngrok_process.terminate()
            self.ngrok_process.wait(timeout=5)
            self.logger.info("‚úÖ ngrok –∑—É–ø–∏–Ω–µ–Ω–æ")
            
        # –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤
        temp_files = ['public_url.txt', 'server_status.txt']
        for file_path in temp_files:
            if Path(file_path).exists():
                Path(file_path).unlink()
                
        self.logger.info("‚úÖ –û—á–∏—â–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–∏–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫—É."""
        self.logger.info("üöÄ –ó–∞–ø—É—Å–∫ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞...")
        self.logger.info(f"üîí –†–µ–∂–∏–º –±–µ–∑–ø–µ–∫–∏: {'–£–í–Ü–ú–ö–ù–ï–ù–û' if self.secure_mode else '–°–¢–ê–ù–î–ê–†–¢–ù–ò–ô'}")
        
        # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è cleanup –Ω–∞ –≤–∏—Ö—ñ–¥
        atexit.register(self.cleanup)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∏
        if not self.check_security_requirements():
            return False
            
        if not self.check_ports():
            return False
            
        if not self.setup_ngrok():
            return False
            
        # –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
        self.configure_flask_app()
        
        # –ó–∞–ø—É—Å–∫ ngrok
        if not self.start_ngrok():
            return False
            
        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—É–±–ª—ñ—á–Ω–æ—ó URL
        public_url = self.get_public_url()
        
        # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É
        Path('server_status.txt').write_text(f"running\n{datetime.now()}\n{public_url or 'N/A'}")
        
        # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        print("\n" + "="*60)
        print("üéâ –ì–õ–û–ë–ê–õ–¨–ù–ò–ô –°–ï–†–í–ï–† –ó–ê–ü–£–©–ï–ù–û!")
        print("="*60)
        print(f"üìç –õ–æ–∫–∞–ª—å–Ω–∏–π –¥–æ—Å—Ç—É–ø:  http://localhost:5000")
        print(f"üåç –ì–ª–æ–±–∞–ª—å–Ω–∏–π –¥–æ—Å—Ç—É–ø: {public_url or '–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ http://localhost:4040'}")
        print(f"üìä ngrok –ø–∞–Ω–µ–ª—å:      http://localhost:4040")
        print(f"üîí –†–µ–∂–∏–º –±–µ–∑–ø–µ–∫–∏:     {'–£–í–Ü–ú–ö–ù–ï–ù–û' if self.secure_mode else '–°–¢–ê–ù–î–ê–†–¢–ù–ò–ô'}")
        print("="*60)
        print("‚ö†Ô∏è  –í–ê–ñ–õ–ò–í–û:")
        print("   - –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–Ω–∏–π –≥–ª–æ–±–∞–ª—å–Ω–æ")
        print("   - –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Å–∏–ª—å–Ω—ñ –ø–∞—Ä–æ–ª—ñ") 
        print("   - –†–µ–≥—É–ª—è—Ä–Ω–æ –ø–µ—Ä–µ–≤—ñ—Ä—è–π—Ç–µ –ª–æ–≥–∏")
        print("   - –î–ª—è –∑—É–ø–∏–Ω–∫–∏: Ctrl+C –∞–±–æ stop_server.bat")
        print("="*60)
        
        # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
        self.start_server()
        
        return True

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è."""
    import argparse
    
    parser = argparse.ArgumentParser(description='–ë–µ–∑–ø–µ—á–Ω–∏–π –≥–ª–æ–±–∞–ª—å–Ω–∏–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è Gantt Calendar')
    parser.add_argument('--secure', action='store_true', 
                       help='–£–≤—ñ–º–∫–Ω—É—Ç–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Ä–µ–∂–∏–º –±–µ–∑–ø–µ–∫–∏')
    parser.add_argument('--check-only', action='store_true',
                       help='–¢—ñ–ª—å–∫–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é')
    parser.add_argument('--test-mode', action='store_true',
                       help='–ó–∞–ø—É—Å–∫ —É —Ç–µ—Å—Ç–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ –±–µ–∑ ngrok')
    
    args = parser.parse_args()
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    manager = GlobalServerManager(secure_mode=args.secure)
    
    if args.test_mode:
        # –¢–µ—Å—Ç–æ–≤–∏–π —Ä–µ–∂–∏–º - —Ç—ñ–ª—å–∫–∏ –ª–æ–∫–∞–ª—å–Ω–∏–π —Å–µ—Ä–≤–µ—Ä
        print("üß™ –¢–ï–°–¢–û–í–ò–ô –†–ï–ñ–ò–ú - –õ–æ–∫–∞–ª—å–Ω–∏–π —Å–µ—Ä–≤–µ—Ä –±–µ–∑ ngrok")
        manager.configure_flask_app()
        
        # –î–æ–¥–∞–≤–∞–Ω–Ω—è health check endpoint
        @main_app.app.route('/health')
        def health_check():
            return {'status': 'ok', 'mode': 'test'}, 200
        
        try:
            main_app.app.run(host='127.0.0.1', port=5000, debug=False)
        except KeyboardInterrupt:
            print("üõë –¢–µ—Å—Ç–æ–≤–∏–π —Å–µ—Ä–≤–µ—Ä –∑—É–ø–∏–Ω–µ–Ω–æ")
        return 0
    elif args.check_only:
        # –¢—ñ–ª—å–∫–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
        security_ok = manager.check_security_requirements()
        ports_ok = manager.check_ports()
        ngrok_ok = manager.setup_ngrok()
        
        if security_ok and ports_ok and ngrok_ok:
            print("‚úÖ –í—Å—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω–æ. –ì–æ—Ç–æ–≤–∏–π –¥–æ –∑–∞–ø—É—Å–∫—É.")
            return 0
        else:
            print("‚ùå –ó–Ω–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º–∏. –ü–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ –ª–æ–≥–∏.")
            return 1
    else:
        # –ü–æ–≤–Ω–∏–π –∑–∞–ø—É—Å–∫
        success = manager.run()
        return 0 if success else 1

if __name__ == '__main__':
    try:
        sys.exit(main())
    except KeyboardInterrupt:
        print("\nüõë –ó—É–ø–∏–Ω–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...")
        sys.exit(0)
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        sys.exit(1)
