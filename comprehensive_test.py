import requests
import json
import time

# –ë–∞–∑–æ–≤–∞ URL
BASE_URL = "http://127.0.0.1:5000"

def test_with_login():
    """–¢–µ—Å—Ç—É—î–º–æ —Å–∏—Å—Ç–µ–º—É –ø—ñ—Å–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó"""
    print("üîê –ê–í–¢–û–ú–ê–¢–ò–ó–û–í–ê–ù–ò–ô –¢–ï–°–¢ –°–ò–°–¢–ï–ú–ò")
    print("=" * 50)
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Å–µ—Å—ñ—é
    session = requests.Session()
    
    try:
        # 1. –ê–≤—Ç–æ—Ä–∏–∑—É—î–º–æ—Å—è
        print("1Ô∏è‚É£ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è...")
        login_data = {
            'username': 'Dmitro',
            'password': 'Prodigy9195'
        }
        
        response = session.post(f"{BASE_URL}/login", data=login_data)
        if response.status_code == 200 and ("admin" in response.text.lower() or "dashboard" in response.text.lower()):
            print("‚úÖ –£—Å–ø—ñ—à–Ω–æ —É–≤—ñ–π—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É")
        else:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—Ö–æ–¥—É: {response.status_code}")
            return False
        
        # 2. –¢–µ—Å—Ç—É—î–º–æ API –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        print("\n2Ô∏è‚É£ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ API...")
        response = session.get(f"{BASE_URL}/test_goods_api")
        
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ –¢–µ—Å—Ç–æ–≤–∏–π API –≤—ñ–¥–ø–æ–≤—ñ–≤ —É—Å–ø—ñ—à–Ω–æ")
            
            # –ü–æ–∫–∞–∑—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–µ—Å—Ç—ñ–≤
            for test in result.get('tests', []):
                status = test.get('status', '‚ùì')
                name = test.get('name', '–ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–µ—Å—Ç')
                details = test.get('details', '')
                print(f"   {status} {name}: {details}")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫—Ä–∏—Ç–∏—á–Ω—ñ –ø–æ–º–∏–ª–∫–∏
            failed_tests = [t for t in result.get('tests', []) if t.get('status') == '‚ùå']
            if failed_tests:
                print(f"\n‚ö†Ô∏è –ó–Ω–∞–π–¥–µ–Ω–æ {len(failed_tests)} –ø—Ä–æ–±–ª–µ–º:")
                for test in failed_tests:
                    print(f"   ‚Ä¢ {test.get('name')}: {test.get('details')}")
                    
                    # –Ø–∫—â–æ –ø—Ä–æ–±–ª–µ–º–∞ —ñ–∑ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è–º —Ç–æ–≤–∞—Ä—ñ–≤ - —Ü–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
                    if '–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è' in test.get('name', '').lower() or '–≤—Ç—Ä–∞—á–µ–Ω–æ' in test.get('details', '').lower():
                        print("üö® –ö–†–ò–¢–ò–ß–ù–ê –ü–†–û–ë–õ–ï–ú–ê: –¢–æ–≤–∞—Ä–∏ –∑–Ω–∏–∫–∞—é—Ç—å –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ!")
                        return False
            else:
                print("\nüéâ –í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π—à–ª–∏ —É—Å–ø—ñ—à–Ω–æ!")
                
                # –ü–æ–∫–∞–∑—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ–≤–∞—Ä—ñ–≤
                goods = result.get('goods', {})
                warehouses = result.get('warehouses', [])
                total_goods = sum(len(items) for items in goods.values())
                
                print(f"\nüìä –ü–æ—Ç–æ—á–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
                print(f"   –ö–∞—Ç–µ–≥–æ—Ä—ñ–π —Ç–æ–≤–∞—Ä—ñ–≤: {len(goods)}")
                print(f"   –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—ñ–≤: {total_goods}")
                print(f"   –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å–∫–ª–∞–¥—ñ–≤: {len(warehouses)}")
                
            return True
        else:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ API: {response.status_code}")
            print(f"–í—ñ–¥–ø–æ–≤—ñ–¥—å: {response.text[:200]}...")
            return False
            
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        return False

def test_manual_goods_api():
    """–¢–µ—Å—Ç—É—î–º–æ API —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ç–æ–≤–∞—Ä–∞–º–∏ –≤—Ä—É—á–Ω—É"""
    print("\nüõ†Ô∏è –†–£–ß–ù–ò–ô –¢–ï–°–¢ API –£–ü–†–ê–í–õ–Ü–ù–ù–Ø –¢–û–í–ê–†–ê–ú–ò")
    print("=" * 50)
    
    session = requests.Session()
    
    try:
        # –ê–≤—Ç–æ—Ä–∏–∑—É—î–º–æ—Å—è
        login_data = {'username': 'Dmitro', 'password': 'Prodigy9195'}
        response = session.post(f"{BASE_URL}/login", data=login_data)
        if response.status_code != 200:
            print("‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó")
            return False
        
        # 1. –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ —Ç–æ–≤–∞—Ä–∏
        print("1Ô∏è‚É£ –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤...")
        response = session.get(f"{BASE_URL}/api/goods_management")
        if response.status_code != 200:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤: {response.status_code}")
            return False
        
        initial_goods = response.json()
        initial_count = sum(len(items) for items in initial_goods.values())
        print(f"‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ {initial_count} —Ç–æ–≤–∞—Ä—ñ–≤ —É {len(initial_goods)} –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö")
        
        # 2. –î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π —Ç–æ–≤–∞—Ä
        print("\n2Ô∏è‚É£ –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä—É...")
        new_good_data = {
            'category': '–¢–µ—Å—Ç',
            'name': f'–ê–≤—Ç–æ—Ç–µ—Å—Ç —Ç–æ–≤–∞—Ä {int(time.time())}',
            'weight': 1.5,
            'pallet_coef': 2.0
        }
        
        response = session.post(f"{BASE_URL}/api/goods_management", 
                              json=new_good_data,
                              headers={'Content-Type': 'application/json'})
        
        if response.status_code == 200:
            print(f"‚úÖ –¢–æ–≤–∞—Ä '{new_good_data['name']}' —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ")
        else:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É: {response.status_code}")
            print(f"–í—ñ–¥–ø–æ–≤—ñ–¥—å: {response.text}")
            return False
        
        # 3. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ —Ç–æ–≤–∞—Ä–∏ –Ω–µ –∑–Ω–∏–∫–ª–∏
        print("\n3Ô∏è‚É£ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤...")
        response = session.get(f"{BASE_URL}/api/goods_management")
        if response.status_code != 200:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤ –ø—ñ—Å–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è: {response.status_code}")
            return False
        
        updated_goods = response.json()
        updated_count = sum(len(items) for items in updated_goods.values())
        
        print(f"   –¢–æ–≤–∞—Ä—ñ–≤ –±—É–ª–æ: {initial_count}")
        print(f"   –¢–æ–≤–∞—Ä—ñ–≤ —Å—Ç–∞–ª–æ: {updated_count}")
        
        if updated_count > initial_count:
            print("‚úÖ –£–°–ü–Ü–•! –¢–æ–≤–∞—Ä–∏ –∑–±–µ—Ä–µ–≥–ª–∏—Å—è, –Ω–æ–≤–∏–π —Ç–æ–≤–∞—Ä –¥–æ–¥–∞–Ω–æ")
            
            # –ü–æ–∫–∞–∑—É—î–º–æ –¥–µ—Ç–∞–ª—ñ
            print(f"\nüìã –û–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            for category, items in updated_goods.items():
                print(f"   {category}: {len(items)} —Ç–æ–≤–∞—Ä—ñ–≤")
                if category == '–¢–µ—Å—Ç':
                    for item in items:
                        print(f"     ‚Ä¢ {item['name']} ({item['weight']} –∫–≥)")
            
            return True
        elif updated_count == initial_count:
            print("‚ö†Ô∏è –¢–æ–≤–∞—Ä –Ω–µ –¥–æ–¥–∞–≤—Å—è –∞–±–æ –∑–∞–º—ñ–Ω–∏–≤ —ñ—Å–Ω—É—é—á–∏–π")
            return False
        else:
            print("‚ùå –ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê! –¢–æ–≤–∞—Ä–∏ –∑–Ω–∏–∫–ª–∏")
            print(f"   –í—Ç—Ä–∞—á–µ–Ω–æ {initial_count - updated_count} —Ç–æ–≤–∞—Ä—ñ–≤")
            return False
            
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ –ö–û–ú–ü–õ–ï–ö–°–ù–ò–ô –¢–ï–°–¢ –°–ò–°–¢–ï–ú–ò –£–ü–†–ê–í–õ–Ü–ù–ù–Ø –¢–û–í–ê–†–ê–ú–ò")
    print("=" * 70)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–∏–π
    try:
        response = requests.get(f"{BASE_URL}/health", timeout=5)
        if response.status_code == 200:
            print("‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–Ω–∏–π")
        else:
            print(f"‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –≤—ñ–¥–ø–æ–≤—ñ–≤ –∑ –∫–æ–¥–æ–º {response.status_code}")
    except:
        print("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ Flask –∑–∞–ø—É—â–µ–Ω–∏–π –Ω–∞ http://127.0.0.1:5000")
        exit(1)
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ç–µ—Å—Ç–∏
    test1_success = test_with_login()
    test2_success = test_manual_goods_api()
    
    # –ü—ñ–¥—Å—É–º–æ–∫
    print("\n" + "=" * 70)
    print("üìã –ü–Ü–î–°–£–ú–û–ö –¢–ï–°–¢–£–í–ê–ù–ù–Ø:")
    print(f"   –î—ñ–∞–≥–Ω–æ—Å—Ç–∏—á–Ω–∏–π —Ç–µ—Å—Ç: {'‚úÖ –ü–†–û–ô–î–ï–ù–û' if test1_success else '‚ùå –ü–†–û–í–ê–õ–ï–ù–û'}")
    print(f"   –†—É—á–Ω–∏–π —Ç–µ—Å—Ç API: {'‚úÖ –ü–†–û–ô–î–ï–ù–û' if test2_success else '‚ùå –ü–†–û–í–ê–õ–ï–ù–û'}")
    
    if test1_success and test2_success:
        print("\nüéâ –í–°–Ü –¢–ï–°–¢–ò –ü–†–û–ô–î–ï–ù–û –£–°–ü–Ü–®–ù–û!")
        print("   –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ç–æ–≤–∞—Ä–∞–º–∏ –ø—Ä–∞—Ü—é—î –∫–æ—Ä–µ–∫—Ç–Ω–æ.")
        print("   –ü—Ä–æ–±–ª–µ–º–∞ –∑—ñ –∑–Ω–∏–∫–∞—é—á–∏–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏ –í–ò–ü–†–ê–í–õ–ï–ù–ê! ‚úÖ")
    else:
        print("\n‚ö†Ô∏è –î–ï–Ø–ö–Ü –¢–ï–°–¢–ò –ü–†–û–í–ê–õ–ò–õ–ò–°–Ø")
        print("   –ü–æ—Ç—Ä—ñ–±–Ω–∞ –¥–æ–¥–∞—Ç–∫–æ–≤–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∞–±–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è.")
