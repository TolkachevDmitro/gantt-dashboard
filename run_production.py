#!/usr/bin/env python3
"""
run_production.py - üîí –ó–∞–ø—É—Å–∫ –¥–æ–¥–∞—Ç–∫—É –≤ –ø—Ä–æ–¥–∞–∫—à–Ω —Ä–µ–∂–∏–º—ñ –∑ –ø—ñ–¥–≤–∏—â–µ–Ω–æ—é –±–µ–∑–ø–µ–∫–æ—é
"""

import os
import sys
from pathlib import Path

# –î–æ–¥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –≤ Python path
sys.path.insert(0, str(Path(__file__).parent))

from app import app
from production_config import ProductionConfig

def main():
    """–ó–∞–ø—É—Å–∫ –¥–æ–¥–∞—Ç–∫—É –≤ –ø—Ä–æ–¥–∞–∫—à–Ω —Ä–µ–∂–∏–º—ñ."""
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
    required_env_vars = [
        'SECRET_KEY',
        'FLASK_ENV'
    ]
    
    missing_vars = []
    for var in required_env_vars:
        if not os.environ.get(var):
            missing_vars.append(var)
    
    if missing_vars:
        print("‚ùå –ü–û–ú–ò–õ–ö–ê: –í—ñ–¥—Å—É—Ç–Ω—ñ –∫—Ä–∏—Ç–∏—á–Ω—ñ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞:")
        for var in missing_vars:
            print(f"   - {var}")
        print("\nüí° –°—Ç–≤–æ—Ä—ñ—Ç—å —Ñ–∞–π–ª .env –∑ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏–º–∏ –∑–º—ñ–Ω–Ω–∏–º–∏ (–¥–∏–≤. .env.example)")
        sys.exit(1)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
    secret_key = os.environ.get('SECRET_KEY', '')
    if secret_key in ['YOUR_SUPER_SECRET_KEY_HERE_CHANGE_THIS', 'change_me', '']:
        print("‚ùå –ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê: –°–µ–∫—Ä–µ—Ç–Ω–∏–π –∫–ª—é—á –Ω–µ –∑–º—ñ–Ω–µ–Ω–æ!")
        print("üí° –ó–≥–µ–Ω–µ—Ä—É–π—Ç–µ –Ω–æ–≤–∏–π —Å–µ–∫—Ä–µ—Ç–Ω–∏–π –∫–ª—é—á:")
        print("   python -c \"import secrets; print(secrets.token_hex(32))\"")
        sys.exit(1)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ DEBUG —Ä–µ–∂–∏–º—É
    if app.debug:
        print("‚ùå –ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê: DEBUG —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–Ω–∏–π –≤ –ø—Ä–æ–¥–∞–∫—à–Ω!")
        print("üí° –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å FLASK_DEBUG=False")
        sys.exit(1)
    
    # –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –ø—Ä–æ–¥–∞–∫—à–Ω –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
    app.config.from_object(ProductionConfig)
    ProductionConfig.init_app(app)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ HTTPS
    if not os.environ.get('SSL_CERT_PATH') or not os.environ.get('SSL_KEY_PATH'):
        print("‚ö†Ô∏è  –£–í–ê–ì–ê: SSL —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç–∏ –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ!")
        print("üí° –ù–∞–ª–∞—à—Ç—É–π—Ç–µ SSL_CERT_PATH —Ç–∞ SSL_KEY_PATH")
        print("   –ê–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ reverse proxy (nginx/apache)")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ª–æ–≥—ñ–≤
    log_dir = Path("logs")
    if not log_dir.exists():
        log_dir.mkdir(parents=True)
        print(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –ª–æ–≥—ñ–≤: {log_dir}")
    
    # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∑–∞–ø—É—Å–∫
    print("üîí –ó–ê–ü–£–°–ö –í –ü–†–û–î–ê–ö–®–ù –†–ï–ñ–ò–ú–Ü")
    print(f"   Environment: {app.config.get('ENV', 'unknown')}")
    print(f"   Debug: {app.debug}")
    print(f"   Secret key: {'‚úÖ –ù–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ' if secret_key else '‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ–π'}")
    print(f"   CSRF Protection: {'‚úÖ –ê–∫—Ç–∏–≤–Ω–æ' if app.config.get('WTF_CSRF_ENABLED') else '‚ùå –í–∏–º–∫–Ω–µ–Ω–æ'}")
    print(f"   Session Security: {'‚úÖ –ù–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ' if app.config.get('SESSION_COOKIE_SECURE') else '‚ö†Ô∏è HTTP —Ç—ñ–ª—å–∫–∏'}")
    
    # –ó–∞–ø—É—Å–∫ –¥–æ–¥–∞—Ç–∫—É
    host = os.environ.get('HOST', '127.0.0.1')
    port = int(os.environ.get('PORT', 5000))
    
    # SSL –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
    ssl_context = None
    cert_path = os.environ.get('SSL_CERT_PATH')
    key_path = os.environ.get('SSL_KEY_PATH')
    
    if cert_path and key_path and Path(cert_path).exists() and Path(key_path).exists():
        ssl_context = (cert_path, key_path)
        print(f"‚úÖ SSL –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ: {cert_path}")
    else:
        print("‚ö†Ô∏è  –ó–∞–ø—É—Å–∫ –±–µ–∑ SSL (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ reverse proxy)")
    
    print(f"\nüöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ {host}:{port}")
    print("   –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Ctrl+C –¥–ª—è –∑—É–ø–∏–Ω–∫–∏")
    
    try:
        app.run(
            host=host,
            port=port,
            debug=False,
            ssl_context=ssl_context,
            threaded=True
        )
    except KeyboardInterrupt:
        print("\nüõë –°–µ—Ä–≤–µ—Ä –∑—É–ø–∏–Ω–µ–Ω–æ")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É: {e}")
        sys.exit(1)

if __name__ == '__main__':
    # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –∑ .env —Ñ–∞–π–ª—É
    try:
        from dotenv import load_dotenv
        load_dotenv()
    except ImportError:
        print("‚ö†Ô∏è  python-dotenv –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –ó–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—é—Ç—å—Å—è –∑ —Å–∏—Å—Ç–µ–º–∏.")
    
    main()
