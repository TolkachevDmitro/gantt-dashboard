#!/usr/bin/env python3
"""
–¢–µ—Å—Ç-—Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ API —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ç–æ–≤–∞—Ä–∞–º–∏
"""
import requests
import json
import sys

BASE_URL = "http://127.0.0.1:5000"

def test_goods_api():
    """–¢–µ—Å—Ç—É—î–º–æ API —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ç–æ–≤–∞—Ä–∞–º–∏"""
    
    print("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è API —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ç–æ–≤–∞—Ä–∞–º–∏")
    print("=" * 50)
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Å–µ—Å—ñ—é –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è cookies
    session = requests.Session()
    
    # –ö—Ä–æ–∫ 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è
    print("1Ô∏è‚É£ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è...")
    
    # –°–ø–æ—á–∞—Ç–∫—É –æ—Ç—Ä–∏–º—É—î–º–æ CSRF —Ç–æ–∫–µ–Ω
    login_page = session.get(f"{BASE_URL}/login")
    if login_page.status_code != 200:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –≤—Ö–æ–¥—É: {login_page.status_code}")
        return False
    
    # –í–∏—Ç—è–≥—É—î–º–æ CSRF —Ç–æ–∫–µ–Ω –∑ HTML
    csrf_token = None
    for line in login_page.text.split('\n'):
        if 'csrf_token' in line and 'value=' in line:
            start = line.find('value="') + 7
            end = line.find('"', start)
            csrf_token = line[start:end]
            break
    
    if not csrf_token:
        print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ CSRF —Ç–æ–∫–µ–Ω")
        return False
    
    # –ê–≤—Ç–æ—Ä–∏–∑—É—î–º–æ—Å—å
    login_data = {
        'username': 'Dmitro',
        'password': 'AdminPass123!',  # –ü–æ—Ç—Ä—ñ–±–Ω–æ –±—É–¥–µ –∑–º—ñ–Ω–∏—Ç–∏ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –ø–∞—Ä–æ–ª—å
        'csrf_token': csrf_token
    }
    
    login_response = session.post(f"{BASE_URL}/login", data=login_data)
    if login_response.status_code != 200 or 'dashboard' not in login_response.url:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó: {login_response.status_code}")
        print("–°–ø—Ä–æ–±—É–π—Ç–µ —É–≤—ñ–π—Ç–∏ –≤ –±—Ä–∞—É–∑–µ—Ä—ñ —Å–ø–æ—á–∞—Ç–∫—É")
        return False
    
    print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞")
    
    # –ö—Ä–æ–∫ 2: –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤
    print("\n2Ô∏è‚É£ –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤...")
    
    response = session.get(f"{BASE_URL}/api/goods_management")
    if response.status_code != 200:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤: {response.status_code}")
        return False
    
    current_goods = response.json()
    print(f"‚úÖ –ü–æ—Ç–æ—á–Ω—ñ —Ç–æ–≤–∞—Ä–∏: {len(current_goods)} –∫–∞—Ç–µ–≥–æ—Ä—ñ–π")
    
    for category, items in current_goods.items():
        print(f"   üì¶ {category}: {len(items)} —Ç–æ–≤–∞—Ä—ñ–≤")
        for item in items[:2]:  # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ 2 —Ç–æ–≤–∞—Ä–∏
            print(f"      - {item['name']} ({item['weight']} –∫–≥)")
    
    # –ö—Ä–æ–∫ 3: –î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π —Ç–µ—Å—Ç–æ–≤–∏–π —Ç–æ–≤–∞—Ä
    print("\n3Ô∏è‚É£ –î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π —Ç–µ—Å—Ç–æ–≤–∏–π —Ç–æ–≤–∞—Ä...")
    
    # –î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π —Ç–æ–≤–∞—Ä –¥–æ —ñ—Å–Ω—É—é—á–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∞–±–æ —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É
    test_category = "–¢–µ—Å—Ç–æ–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è"
    test_product = {
        "name": f"–¢–µ—Å—Ç–æ–≤–∏–π —Ç–æ–≤–∞—Ä {len(current_goods.get(test_category, []))}",
        "weight": 1.5,
        "pallet_coef": 2.0
    }
    
    # –ö–æ–ø—ñ—é—î–º–æ —ñ—Å–Ω—É—é—á—ñ —Ç–æ–≤–∞—Ä–∏ —Ç–∞ –¥–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π
    updated_goods = current_goods.copy()
    if test_category not in updated_goods:
        updated_goods[test_category] = []
    updated_goods[test_category].append(test_product)
    
    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—ñ –¥–∞–Ω—ñ
    response = session.post(
        f"{BASE_URL}/api/goods_management",
        json=updated_goods,
        headers={'Content-Type': 'application/json'}
    )
    
    if response.status_code != 200:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É: {response.status_code}")
        print(f"–í—ñ–¥–ø–æ–≤—ñ–¥—å: {response.text}")
        return False
    
    print(f"‚úÖ –¢–æ–≤–∞—Ä –¥–æ–¥–∞–Ω–æ: {test_product['name']}")
    
    # –ö—Ä–æ–∫ 4: –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ —Ç–æ–≤–∞—Ä –∑–±–µ—Ä–µ–∂–µ–Ω–æ
    print("\n4Ô∏è‚É£ –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É...")
    
    response = session.get(f"{BASE_URL}/api/goods_management")
    if response.status_code != 200:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤: {response.status_code}")
        return False
    
    updated_goods_check = response.json()
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –Ω–∞—à —Ç–µ—Å—Ç–æ–≤–∏–π —Ç–æ–≤–∞—Ä
    if test_category in updated_goods_check:
        test_items = updated_goods_check[test_category]
        found_test_item = any(item['name'] == test_product['name'] for item in test_items)
        if found_test_item:
            print("‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —Ç–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ!")
            print(f"   üì¶ {test_category}: {len(test_items)} —Ç–æ–≤–∞—Ä—ñ–≤")
        else:
            print("‚ùå –¢–µ—Å—Ç–æ–≤–∏–π —Ç–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø—ñ—Å–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è")
            return False
    else:
        print("‚ùå –¢–µ—Å—Ç–æ–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –ø—ñ—Å–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è")
        return False
    
    # –ö—Ä–æ–∫ 5: –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ —ñ–Ω—à—ñ —Ç–æ–≤–∞—Ä–∏ –Ω–µ –∑–Ω–∏–∫–ª–∏
    print("\n5Ô∏è‚É£ –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ —ñ–Ω—à—ñ —Ç–æ–≤–∞—Ä–∏ –Ω–µ –∑–Ω–∏–∫–ª–∏...")
    
    original_total = sum(len(items) for items in current_goods.values())
    updated_total = sum(len(items) for items in updated_goods_check.values())
    
    if updated_total >= original_total:
        print(f"‚úÖ –í—Å—ñ —Ç–æ–≤–∞—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ! –ë—É–ª–æ: {original_total}, —Å—Ç–∞–ª–æ: {updated_total}")
    else:
        print(f"‚ùå –¢–æ–≤–∞—Ä–∏ –∑–Ω–∏–∫–ª–∏! –ë—É–ª–æ: {original_total}, —Å—Ç–∞–ª–æ: {updated_total}")
        return False
    
    print("\nüéâ –í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
    print("‚úÖ –ü—Ä–æ–±–ª–µ–º–∞ –∑—ñ –∑–Ω–∏–∫–∞—é—á–∏–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–∞!")
    
    return True

if __name__ == "__main__":
    success = test_goods_api()
    sys.exit(0 if success else 1)
